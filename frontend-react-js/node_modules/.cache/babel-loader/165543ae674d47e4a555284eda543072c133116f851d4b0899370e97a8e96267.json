{"ast":null,"code":"import { __asyncValues, __awaiter, __generator, __read, __spread, __values } from \"tslib\";\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport * as idb from 'idb';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { isPredicateObj, isPredicateGroup, OpType, QueryOne } from '../../types';\nimport { getIndex, getIndexFromAssociation, isModelConstructor, isPrivateMode, traverseModel, validatePredicate, inMemoryPagination, keysEqual, getStorename, getIndexKeys, extractPrimaryKeyValues, isSafariCompatabilityMode } from '../../util';\nvar logger = new Logger('DataStore');\n/**\n * The point after which queries composed of multiple simple OR conditions\n * should scan-and-filter instead of individual queries for each condition.\n *\n * At some point, this should be configurable and/or dynamic based on table\n * size and possibly even on observed average seek latency. For now, it's\n * based on an manual \"binary search\" for the breakpoint as measured in the\n * unit test suite. This isn't necessarily optimal. But, it's at least derived\n * empirically, rather than theoretically and without any verification!\n *\n * REMEMBER! If you run more realistic benchmarks and update this value, update\n * this comment so the validity and accuracy of future query tuning exercises\n * can be compared to the methods used to derive the current value. E.g.,\n *\n * 1. In browser benchmark > unit test benchmark\n * 2. Multi-browser benchmark > single browser benchmark\n * 3. Benchmarks of various table sizes > static table size benchmark\n *\n * etc...\n *\n */\nvar MULTI_OR_CONDITION_SCAN_BREAKPOINT = 7;\nvar DB_NAME = 'amplify-datastore';\nvar IndexedDBAdapter = /** @class */function () {\n  function IndexedDBAdapter() {\n    var _this = this;\n    this.dbName = DB_NAME;\n    this.safariCompatabilityMode = false;\n    /**\n     * Checks the given path against the browser's IndexedDB implementation for\n     * necessary compatibility transformations, applying those transforms if needed.\n     *\n     * @param `keyArr` strings to compatibilize for browser-indexeddb index operations\n     * @returns An array or string, depending on and given key,\n     * that is ensured to be compatible with the IndexedDB implementation's nuances.\n     */\n    this.canonicalKeyPath = function (keyArr) {\n      if (_this.safariCompatabilityMode) {\n        return keyArr.length > 1 ? keyArr : keyArr[0];\n      }\n      return keyArr;\n    };\n  }\n  IndexedDBAdapter.prototype.getStorenameForModel = function (modelConstructor) {\n    var namespace = this.namespaceResolver(modelConstructor);\n    var modelName = modelConstructor.name;\n    return getStorename(namespace, modelName);\n  };\n  // Retrieves primary key values from a model\n  IndexedDBAdapter.prototype.getIndexKeyValuesFromModel = function (model) {\n    var modelConstructor = Object.getPrototypeOf(model).constructor;\n    var namespaceName = this.namespaceResolver(modelConstructor);\n    var keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n    return extractPrimaryKeyValues(model, keys);\n  };\n  IndexedDBAdapter.prototype.checkPrivate = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var isPrivate;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, isPrivateMode().then(function (isPrivate) {\n              return isPrivate;\n            })];\n          case 1:\n            isPrivate = _a.sent();\n            if (isPrivate) {\n              logger.error(\"IndexedDB not supported in this browser's private mode\");\n              return [2 /*return*/, Promise.reject(\"IndexedDB not supported in this browser's private mode\")];\n            } else {\n              return [2 /*return*/, Promise.resolve()];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Whether the browser's implementation of IndexedDB is coercing single-field\n   * indexes to a scalar key.\n   *\n   * If this returns `true`, we need to treat indexes containing a single field\n   * as scalars.\n   *\n   * See PR description for reference:\n   * https://github.com/aws-amplify/amplify-js/pull/10527\n   */\n  IndexedDBAdapter.prototype.setSafariCompatabilityMode = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4 /*yield*/, isSafariCompatabilityMode()];\n          case 1:\n            _a.safariCompatabilityMode = _b.sent();\n            if (this.safariCompatabilityMode === true) {\n              logger.debug('IndexedDB Adapter is running in Safari Compatability Mode');\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.getNamespaceAndModelFromStorename = function (storeName) {\n    var _a = __read(storeName.split('_')),\n      namespaceName = _a[0],\n      modelNameArr = _a.slice(1);\n    return {\n      namespaceName: namespaceName,\n      modelName: modelNameArr.join('_')\n    };\n  };\n  IndexedDBAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName, sessionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var VERSION, _a, error_1;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            return [4 /*yield*/, this.setSafariCompatabilityMode()];\n          case 2:\n            _b.sent();\n            if (!!this.initPromise) return [3 /*break*/, 3];\n            this.initPromise = new Promise(function (res, rej) {\n              _this.resolve = res;\n              _this.reject = rej;\n            });\n            return [3 /*break*/, 5];\n          case 3:\n            return [4 /*yield*/, this.initPromise];\n          case 4:\n            _b.sent();\n            _b.label = 5;\n          case 5:\n            if (sessionId) {\n              this.dbName = DB_NAME + \"-\" + sessionId;\n            }\n            this.schema = theSchema;\n            this.namespaceResolver = namespaceResolver;\n            this.modelInstanceCreator = modelInstanceCreator;\n            this.getModelConstructorByModelName = getModelConstructorByModelName;\n            _b.label = 6;\n          case 6:\n            _b.trys.push([6, 9,, 10]);\n            if (!!this.db) return [3 /*break*/, 8];\n            VERSION = 3;\n            _a = this;\n            return [4 /*yield*/, idb.openDB(this.dbName, VERSION, {\n              upgrade: function upgrade(db, oldVersion, newVersion, txn) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var _a, _b, storeName, origStore, tmpName, _c, namespaceName, modelName, modelInCurrentSchema, newStore, cursor, count, e_1_1, error_2;\n                  var e_1, _d;\n                  var _this = this;\n                  return __generator(this, function (_e) {\n                    switch (_e.label) {\n                      case 0:\n                        if (oldVersion === 0) {\n                          Object.keys(theSchema.namespaces).forEach(function (namespaceName) {\n                            var namespace = theSchema.namespaces[namespaceName];\n                            Object.keys(namespace.models).forEach(function (modelName) {\n                              var storeName = getStorename(namespaceName, modelName);\n                              _this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                            });\n                          });\n                          return [2 /*return*/];\n                        }\n\n                        if (!((oldVersion === 1 || oldVersion === 2) && newVersion === 3)) return [3 /*break*/, 16];\n                        _e.label = 1;\n                      case 1:\n                        _e.trys.push([1, 14,, 15]);\n                        _e.label = 2;\n                      case 2:\n                        _e.trys.push([2, 11, 12, 13]);\n                        _a = __values(txn.objectStoreNames), _b = _a.next();\n                        _e.label = 3;\n                      case 3:\n                        if (!!_b.done) return [3 /*break*/, 10];\n                        storeName = _b.value;\n                        origStore = txn.objectStore(storeName);\n                        tmpName = \"tmp_\" + storeName;\n                        origStore.name = tmpName;\n                        _c = this.getNamespaceAndModelFromStorename(storeName), namespaceName = _c.namespaceName, modelName = _c.modelName;\n                        modelInCurrentSchema = modelName in this.schema.namespaces[namespaceName].models;\n                        if (!modelInCurrentSchema) {\n                          // delete original\n                          db.deleteObjectStore(tmpName);\n                          return [3 /*break*/, 9];\n                        }\n                        newStore = this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                        return [4 /*yield*/, origStore.openCursor()];\n                      case 4:\n                        cursor = _e.sent();\n                        count = 0;\n                        _e.label = 5;\n                      case 5:\n                        if (!(cursor && cursor.value)) return [3 /*break*/, 8];\n                        // we don't pass key, since they are all new entries in the new store\n                        return [4 /*yield*/, newStore.put(cursor.value)];\n                      case 6:\n                        // we don't pass key, since they are all new entries in the new store\n                        _e.sent();\n                        return [4 /*yield*/, cursor.continue()];\n                      case 7:\n                        cursor = _e.sent();\n                        count++;\n                        return [3 /*break*/, 5];\n                      case 8:\n                        // delete original\n                        db.deleteObjectStore(tmpName);\n                        logger.debug(count + \" \" + storeName + \" records migrated\");\n                        _e.label = 9;\n                      case 9:\n                        _b = _a.next();\n                        return [3 /*break*/, 3];\n                      case 10:\n                        return [3 /*break*/, 13];\n                      case 11:\n                        e_1_1 = _e.sent();\n                        e_1 = {\n                          error: e_1_1\n                        };\n                        return [3 /*break*/, 13];\n                      case 12:\n                        try {\n                          if (_b && !_b.done && (_d = _a.return)) _d.call(_a);\n                        } finally {\n                          if (e_1) throw e_1.error;\n                        }\n                        return [7 /*endfinally*/];\n                      case 13:\n                        // add new models created after IndexedDB, but before migration\n                        // this case may happen when a user has not opened an app for\n                        // some time and a new model is added during that time\n                        Object.keys(theSchema.namespaces).forEach(function (namespaceName) {\n                          var namespace = theSchema.namespaces[namespaceName];\n                          var objectStoreNames = new Set(txn.objectStoreNames);\n                          Object.keys(namespace.models).map(function (modelName) {\n                            return [modelName, getStorename(namespaceName, modelName)];\n                          }).filter(function (_a) {\n                            var _b = __read(_a, 2),\n                              storeName = _b[1];\n                            return !objectStoreNames.has(storeName);\n                          }).forEach(function (_a) {\n                            var _b = __read(_a, 2),\n                              modelName = _b[0],\n                              storeName = _b[1];\n                            _this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                          });\n                        });\n                        return [3 /*break*/, 15];\n                      case 14:\n                        error_2 = _e.sent();\n                        logger.error('Error migrating IndexedDB data', error_2);\n                        txn.abort();\n                        throw error_2;\n                      case 15:\n                        return [2 /*return*/];\n                      case 16:\n                        return [2 /*return*/];\n                    }\n                  });\n                });\n              }\n            })];\n\n          case 7:\n            _a.db = _b.sent();\n            this.resolve();\n            _b.label = 8;\n          case 8:\n            return [3 /*break*/, 10];\n          case 9:\n            error_1 = _b.sent();\n            this.reject(error_1);\n            return [3 /*break*/, 10];\n          case 10:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype._get = function (storeOrStoreName, keyArr) {\n    return __awaiter(this, void 0, void 0, function () {\n      var index, storeName, store, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (typeof storeOrStoreName === 'string') {\n              storeName = storeOrStoreName;\n              index = this.db.transaction(storeName, 'readonly').store.index('byPk');\n            } else {\n              store = storeOrStoreName;\n              index = store.index('byPk');\n            }\n            return [4 /*yield*/, index.get(this.canonicalKeyPath(keyArr))];\n          case 1:\n            result = _a.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.save = function (model, condition) {\n    var e_2, _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var modelConstructor, storeName, namespaceName, connectedModels, set, connectionStoreNames, tx, store, keyValues, fromDB, predicates, _b, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, keys, store_1, itemKeyValues, fromDB_1, opType, modelKeyValues, key, e_2_1;\n      var _this = this;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _c.sent();\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[namespaceName], this.modelInstanceCreator, this.getModelConstructorByModelName);\n            set = new Set();\n            connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n              var modelName = _a.modelName,\n                item = _a.item,\n                instance = _a.instance;\n              var storeName = getStorename(namespaceName, modelName);\n              set.add(storeName);\n              var keys = getIndexKeys(_this.schema.namespaces[namespaceName], modelName);\n              return {\n                storeName: storeName,\n                item: item,\n                instance: instance,\n                keys: keys\n              };\n            });\n            tx = this.db.transaction(__spread([storeName], Array.from(set.values())), 'readwrite');\n            store = tx.objectStore(storeName);\n            keyValues = this.getIndexKeyValuesFromModel(model);\n            return [4 /*yield*/, this._get(store, keyValues)];\n          case 2:\n            fromDB = _c.sent();\n            if (condition && fromDB) {\n              predicates = ModelPredicateCreator.getPredicates(condition);\n              _b = predicates || {}, predicateObjs = _b.predicates, type = _b.type;\n              isValid = validatePredicate(fromDB, type, predicateObjs);\n              if (!isValid) {\n                msg = 'Conditional update failed';\n                logger.error(msg, {\n                  model: fromDB,\n                  condition: predicateObjs\n                });\n                throw new Error(msg);\n              }\n            }\n            result = [];\n            _c.label = 3;\n          case 3:\n            _c.trys.push([3, 11, 12, 17]);\n            connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n            _c.label = 4;\n          case 4:\n            return [4 /*yield*/, connectionStoreNames_1.next()];\n          case 5:\n            if (!(connectionStoreNames_1_1 = _c.sent(), !connectionStoreNames_1_1.done)) return [3 /*break*/, 10];\n            resItem = connectionStoreNames_1_1.value;\n            storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance, keys = resItem.keys;\n            store_1 = tx.objectStore(storeName_1);\n            itemKeyValues = keys.map(function (key) {\n              var value = item[key];\n              return value;\n            });\n            return [4 /*yield*/, this._get(store_1, itemKeyValues)];\n          case 6:\n            fromDB_1 = _c.sent();\n            opType = fromDB_1 === undefined ? OpType.INSERT : OpType.UPDATE;\n            modelKeyValues = this.getIndexKeyValuesFromModel(model);\n            if (!(keysEqual(itemKeyValues, modelKeyValues) || opType === OpType.INSERT)) return [3 /*break*/, 9];\n            return [4 /*yield*/, store_1.index('byPk').getKey(this.canonicalKeyPath(itemKeyValues))];\n          case 7:\n            key = _c.sent();\n            return [4 /*yield*/, store_1.put(item, key)];\n          case 8:\n            _c.sent();\n            result.push([instance, opType]);\n            _c.label = 9;\n          case 9:\n            return [3 /*break*/, 4];\n          case 10:\n            return [3 /*break*/, 17];\n          case 11:\n            e_2_1 = _c.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3 /*break*/, 17];\n          case 12:\n            _c.trys.push([12,, 15, 16]);\n            if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3 /*break*/, 14];\n            return [4 /*yield*/, _a.call(connectionStoreNames_1)];\n          case 13:\n            _c.sent();\n            _c.label = 14;\n          case 14:\n            return [3 /*break*/, 16];\n          case 15:\n            if (e_2) throw e_2.error;\n            return [7 /*endfinally*/];\n          case 16:\n            return [7 /*endfinally*/];\n          case 17:\n            return [4 /*yield*/, tx.done];\n          case 18:\n            _c.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.load = function (namespaceName, srcModelName, records) {\n    return __awaiter(this, void 0, void 0, function () {\n      var namespace, relations, connectionStoreNames, modelConstructor;\n      var _this = this;\n      return __generator(this, function (_a) {\n        namespace = this.schema.namespaces[namespaceName];\n        relations = namespace.relationships[srcModelName].relationTypes;\n        connectionStoreNames = relations.map(function (_a) {\n          var modelName = _a.modelName;\n          return getStorename(namespaceName, modelName);\n        });\n        modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n        if (connectionStoreNames.length === 0) {\n          return [2 /*return*/, records.map(function (record) {\n            return _this.modelInstanceCreator(modelConstructor, record);\n          })];\n        }\n        return [2 /*return*/, records.map(function (record) {\n          return _this.modelInstanceCreator(modelConstructor, record);\n        })];\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, namespaceName, predicates, keyPath, queryByKey, hasSort, hasPagination, records;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _a.sent();\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            predicates = predicate && ModelPredicateCreator.getPredicates(predicate);\n            keyPath = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n            queryByKey = predicates && this.keyValueFromPredicate(predicates, keyPath);\n            hasSort = pagination && pagination.sort;\n            hasPagination = pagination && pagination.limit;\n            return [4 /*yield*/, function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var record, filtered, all;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!queryByKey) return [3 /*break*/, 2];\n                      return [4 /*yield*/, this.getByKey(storeName, queryByKey)];\n                    case 1:\n                      record = _a.sent();\n                      return [2 /*return*/, record ? [record] : []];\n                    case 2:\n                      if (!predicates) return [3 /*break*/, 4];\n                      return [4 /*yield*/, this.filterOnPredicate(storeName, predicates)];\n                    case 3:\n                      filtered = _a.sent();\n                      return [2 /*return*/, this.inMemoryPagination(filtered, pagination)];\n                    case 4:\n                      if (!hasSort) return [3 /*break*/, 6];\n                      return [4 /*yield*/, this.getAll(storeName)];\n                    case 5:\n                      all = _a.sent();\n                      return [2 /*return*/, this.inMemoryPagination(all, pagination)];\n                    case 6:\n                      if (hasPagination) {\n                        return [2 /*return*/, this.enginePagination(storeName, pagination)];\n                      }\n                      return [2 /*return*/, this.getAll(storeName)];\n                  }\n                });\n              });\n            }()];\n          case 2:\n            records = _a.sent();\n            return [4 /*yield*/, this.load(namespaceName, modelConstructor.name, records)];\n          case 3:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.getByKey = function (storeName, keyValue) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._get(storeName, keyValue)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.getAll = function (storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.keyValueFromPredicate = function (predicates, keyPath) {\n    var e_3, _a;\n    var predicateObjs = predicates.predicates;\n    if (predicateObjs.length !== keyPath.length) {\n      return;\n    }\n    var keyValues = [];\n    var _loop_1 = function _loop_1(key) {\n      var predicateObj = predicateObjs.find(function (p) {\n        // it's a relevant predicate object only if it's an equality\n        // operation for a key field from the key:\n        return isPredicateObj(p) && p.field === key && p.operator === 'eq' &&\n        // it's only valid if it's not nullish.\n        // (IDB will throw a fit if it's nullish.)\n        p.operand !== null && p.operand !== undefined;\n      });\n      predicateObj && keyValues.push(predicateObj.operand);\n    };\n    try {\n      for (var keyPath_1 = __values(keyPath), keyPath_1_1 = keyPath_1.next(); !keyPath_1_1.done; keyPath_1_1 = keyPath_1.next()) {\n        var key = keyPath_1_1.value;\n        _loop_1(key);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (keyPath_1_1 && !keyPath_1_1.done && (_a = keyPath_1.return)) _a.call(keyPath_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n    return keyValues.length === keyPath.length ? keyValues : undefined;\n  };\n  /**\n   * Tries to generate an index fetcher for the given predicates. Assumes\n   * that the given predicate conditions are contained by an AND group and\n   * should therefore all match a single record.\n   *\n   * @param storeName The table to query.\n   * @param predicates The predicates to try to AND together.\n   * @param transaction\n   */\n  IndexedDBAdapter.prototype.matchingIndexQueries = function (storeName, predicates, transaction) {\n    var e_4, _a, e_5, _b;\n    var _this = this;\n    // could be expanded later to include `exec()` and a `cardinality` estimate?\n    var queries = [];\n    var predicateIndex = new Map();\n    try {\n      for (var predicates_1 = __values(predicates), predicates_1_1 = predicates_1.next(); !predicates_1_1.done; predicates_1_1 = predicates_1.next()) {\n        var predicate = predicates_1_1.value;\n        predicateIndex.set(String(predicate.field), predicate);\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (predicates_1_1 && !predicates_1_1.done && (_a = predicates_1.return)) _a.call(predicates_1);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n    var store = transaction.objectStore(storeName);\n    var _loop_2 = function _loop_2(name_1) {\n      var e_6, _a;\n      var idx = store.index(name_1);\n      var keypath = Array.isArray(idx.keyPath) ? idx.keyPath : [idx.keyPath];\n      var matchingPredicateValues = [];\n      try {\n        for (var keypath_1 = (e_6 = void 0, __values(keypath)), keypath_1_1 = keypath_1.next(); !keypath_1_1.done; keypath_1_1 = keypath_1.next()) {\n          var field = keypath_1_1.value;\n          var p = predicateIndex.get(field);\n          if (p && p.operand !== null && p.operand !== undefined) {\n            matchingPredicateValues.push(p.operand);\n          } else {\n            break;\n          }\n        }\n      } catch (e_6_1) {\n        e_6 = {\n          error: e_6_1\n        };\n      } finally {\n        try {\n          if (keypath_1_1 && !keypath_1_1.done && (_a = keypath_1.return)) _a.call(keypath_1);\n        } finally {\n          if (e_6) throw e_6.error;\n        }\n      }\n      // if we have a matching predicate field for each component of this index,\n      // we can build a query for it. otherwise, we can't.\n      if (matchingPredicateValues.length === keypath.length) {\n        // re-create a transaction, because the transaction used to fetch the\n        // indexes may no longer be active.\n        queries.push(function () {\n          return _this.db.transaction(storeName).objectStore(storeName).index(name_1).getAll(_this.canonicalKeyPath(matchingPredicateValues));\n        });\n      }\n    };\n    try {\n      for (var _c = __values(store.indexNames), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var name_1 = _d.value;\n        _loop_2(name_1);\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n    return queries;\n  };\n  IndexedDBAdapter.prototype.baseQueryIndex = function (storeName, predicates, transaction) {\n    return __awaiter(this, void 0, void 0, function () {\n      var predicateObjs, type, fieldPredicates, txn, result, groupQueries, objectQueries, indexedQueries;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            predicateObjs = predicates.predicates, type = predicates.type;\n            // the predicate objects we care about tend to be nested at least\n            // one level down: `{and: {or: {and: { <the predicates we want> }}}}`\n            // so, we unpack and/or groups until we find a group with more than 1\n            // child OR a child that is not a group (and is therefore a predicate \"object\").\n            while (predicateObjs.length === 1 && isPredicateGroup(predicateObjs[0]) && predicateObjs[0].type !== 'not') {\n              type = predicateObjs[0].type;\n              predicateObjs = predicateObjs[0].predicates;\n            }\n            fieldPredicates = predicateObjs.filter(function (p) {\n              return isPredicateObj(p) && p.operator === 'eq';\n            });\n            txn = transaction || this.db.transaction(storeName);\n            result = {};\n            if (!(type === 'or')) return [3 /*break*/, 2];\n            return [4 /*yield*/, Promise.all(predicateObjs.filter(function (o) {\n              return isPredicateGroup(o) && o.type === 'and';\n            }).map(function (o) {\n              return _this.baseQueryIndex(storeName, o, txn);\n            })).then(function (queries) {\n              return queries.filter(function (q) {\n                return q.indexedQueries.length === 1;\n              }).map(function (i) {\n                return i.indexedQueries;\n              });\n            })];\n          case 1:\n            groupQueries = _a.sent();\n            objectQueries = predicateObjs.filter(function (o) {\n              return isPredicateObj(o);\n            }).map(function (o) {\n              return _this.matchingIndexQueries(storeName, [o], txn);\n            });\n            indexedQueries = __spread(groupQueries, objectQueries).map(function (q) {\n              return q[0];\n            }).filter(function (i) {\n              return i;\n            });\n            // if, after hunting for base queries, we don't have exactly 1 base query\n            // for each child group + object, stop trying to optimize. we're not dealing\n            // with a simple query that fits the intended optimization path.\n            if (predicateObjs.length > indexedQueries.length) {\n              result = {\n                groupType: null,\n                indexedQueries: []\n              };\n            } else {\n              result = {\n                groupType: 'or',\n                indexedQueries: indexedQueries\n              };\n            }\n            return [3 /*break*/, 3];\n          case 2:\n            if (type === 'and') {\n              // our potential indexes or lacks thereof.\n              // note that we're only optimizing for `eq` right now.\n              result = {\n                groupType: type,\n                indexedQueries: this.matchingIndexQueries(storeName, fieldPredicates, txn)\n              };\n            } else {\n              result = {\n                groupType: null,\n                indexedQueries: []\n              };\n            }\n            _a.label = 3;\n          case 3:\n            if (!!transaction) return [3 /*break*/, 5];\n            return [4 /*yield*/, txn.done];\n          case 4:\n            _a.sent();\n            _a.label = 5;\n          case 5:\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.filterOnPredicate = function (storeName, predicates) {\n    return __awaiter(this, void 0, void 0, function () {\n      var predicateObjs, type, _a, groupType, indexedQueries, candidateResults, distinctResults, indexedQueries_1, indexedQueries_1_1, query, resultGroup, resultGroup_1, resultGroup_1_1, item, distinctificationString, e_7_1, filtered;\n      var e_7, _b, e_8, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            predicateObjs = predicates.predicates, type = predicates.type;\n            return [4 /*yield*/, this.baseQueryIndex(storeName, predicates)];\n          case 1:\n            _a = _d.sent(), groupType = _a.groupType, indexedQueries = _a.indexedQueries;\n            if (!(groupType === 'and' && indexedQueries.length > 0)) return [3 /*break*/, 3];\n            return [4 /*yield*/, indexedQueries[0]()];\n          case 2:\n            // each condition must be satsified, we can form a base set with any\n            // ONE of those conditions and then filter.\n            candidateResults = _d.sent();\n            return [3 /*break*/, 14];\n          case 3:\n            if (!(groupType === 'or' && indexedQueries.length > 0 && indexedQueries.length <= MULTI_OR_CONDITION_SCAN_BREAKPOINT)) return [3 /*break*/, 12];\n            distinctResults = new Map();\n            _d.label = 4;\n          case 4:\n            _d.trys.push([4, 9, 10, 11]);\n            indexedQueries_1 = __values(indexedQueries), indexedQueries_1_1 = indexedQueries_1.next();\n            _d.label = 5;\n          case 5:\n            if (!!indexedQueries_1_1.done) return [3 /*break*/, 8];\n            query = indexedQueries_1_1.value;\n            return [4 /*yield*/, query()];\n          case 6:\n            resultGroup = _d.sent();\n            try {\n              for (resultGroup_1 = (e_8 = void 0, __values(resultGroup)), resultGroup_1_1 = resultGroup_1.next(); !resultGroup_1_1.done; resultGroup_1_1 = resultGroup_1.next()) {\n                item = resultGroup_1_1.value;\n                distinctificationString = JSON.stringify(item);\n                distinctResults.set(distinctificationString, item);\n              }\n            } catch (e_8_1) {\n              e_8 = {\n                error: e_8_1\n              };\n            } finally {\n              try {\n                if (resultGroup_1_1 && !resultGroup_1_1.done && (_c = resultGroup_1.return)) _c.call(resultGroup_1);\n              } finally {\n                if (e_8) throw e_8.error;\n              }\n            }\n            _d.label = 7;\n          case 7:\n            indexedQueries_1_1 = indexedQueries_1.next();\n            return [3 /*break*/, 5];\n          case 8:\n            return [3 /*break*/, 11];\n          case 9:\n            e_7_1 = _d.sent();\n            e_7 = {\n              error: e_7_1\n            };\n            return [3 /*break*/, 11];\n          case 10:\n            try {\n              if (indexedQueries_1_1 && !indexedQueries_1_1.done && (_b = indexedQueries_1.return)) _b.call(indexedQueries_1);\n            } finally {\n              if (e_7) throw e_7.error;\n            }\n            return [7 /*endfinally*/];\n          case 11:\n            // we could conceivably check for special conditions and return early here.\n            // but, this is simpler and has not yet had a measurable performance impact.\n            candidateResults = Array.from(distinctResults.values());\n            return [3 /*break*/, 14];\n          case 12:\n            return [4 /*yield*/, this.getAll(storeName)];\n          case 13:\n            // nothing intelligent we can do with `not` groups unless or until we start\n            // smashing comparison operators against indexes -- at which point we could\n            // perform some reversal here.\n            candidateResults = _d.sent();\n            _d.label = 14;\n          case 14:\n            filtered = predicateObjs ? candidateResults.filter(function (m) {\n              return validatePredicate(m, type, predicateObjs);\n            }) : candidateResults;\n            return [2 /*return*/, filtered];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.inMemoryPagination = function (records, pagination) {\n    return inMemoryPagination(records, pagination);\n  };\n  IndexedDBAdapter.prototype.enginePagination = function (storeName, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, _a, page, _b, limit, initialRecord, cursor, pageResults, hasLimit;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!pagination) return [3 /*break*/, 7];\n            _a = pagination.page, page = _a === void 0 ? 0 : _a, _b = pagination.limit, limit = _b === void 0 ? 0 : _b;\n            initialRecord = Math.max(0, page * limit) || 0;\n            return [4 /*yield*/, this.db.transaction(storeName).objectStore(storeName).openCursor()];\n          case 1:\n            cursor = _c.sent();\n            if (!(cursor && initialRecord > 0)) return [3 /*break*/, 3];\n            return [4 /*yield*/, cursor.advance(initialRecord)];\n          case 2:\n            _c.sent();\n            _c.label = 3;\n          case 3:\n            pageResults = [];\n            hasLimit = typeof limit === 'number' && limit > 0;\n            _c.label = 4;\n          case 4:\n            if (!(cursor && cursor.value)) return [3 /*break*/, 6];\n            pageResults.push(cursor.value);\n            if (hasLimit && pageResults.length === limit) {\n              return [3 /*break*/, 6];\n            }\n            return [4 /*yield*/, cursor.continue()];\n          case 5:\n            cursor = _c.sent();\n            return [3 /*break*/, 4];\n          case 6:\n            result = pageResults;\n            return [3 /*break*/, 9];\n          case 7:\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 8:\n            result = _c.sent();\n            _c.label = 9;\n          case 9:\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, cursor, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _a.sent();\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4 /*yield*/, this.db.transaction([storeName], 'readonly').objectStore(storeName).openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev')];\n          case 2:\n            cursor = _a.sent();\n            result = cursor ? cursor.value : undefined;\n            return [2 /*return*/, result && this.modelInstanceCreator(modelConstructor, result)];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.delete = function (modelOrModelConstructor, condition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteQueue, modelConstructor, nameSpace, storeName, models, relations, deletedModels, deletedModels, model, modelConstructor, namespaceName, storeName, tx, store, keyValues, fromDB, msg, predicates, _a, predicateObjs, type, isValid, msg, relations, relations, deletedModels;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            deleteQueue = [];\n            if (!isModelConstructor(modelOrModelConstructor)) return [3 /*break*/, 9];\n            modelConstructor = modelOrModelConstructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4 /*yield*/, this.query(modelConstructor, condition)];\n          case 2:\n            models = _b.sent();\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            if (!(condition !== undefined)) return [3 /*break*/, 5];\n            return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n          case 3:\n            _b.sent();\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 4:\n            _b.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [models, deletedModels]];\n          case 5:\n            return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n          case 6:\n            _b.sent();\n            // Delete all\n            return [4 /*yield*/, this.db.transaction([storeName], 'readwrite').objectStore(storeName).clear()];\n          case 7:\n            // Delete all\n            _b.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [models, deletedModels]];\n          case 8:\n            return [3 /*break*/, 17];\n          case 9:\n            model = modelOrModelConstructor;\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            namespaceName = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            if (!condition) return [3 /*break*/, 13];\n            tx = this.db.transaction([storeName], 'readwrite');\n            store = tx.objectStore(storeName);\n            keyValues = this.getIndexKeyValuesFromModel(model);\n            return [4 /*yield*/, this._get(store, keyValues)];\n          case 10:\n            fromDB = _b.sent();\n            if (fromDB === undefined) {\n              msg = 'Model instance not found in storage';\n              logger.warn(msg, {\n                model: model\n              });\n              return [2 /*return*/, [[model], []]];\n            }\n            predicates = ModelPredicateCreator.getPredicates(condition);\n            _a = predicates, predicateObjs = _a.predicates, type = _a.type;\n            isValid = validatePredicate(fromDB, type, predicateObjs);\n            if (!isValid) {\n              msg = 'Conditional update failed';\n              logger.error(msg, {\n                model: fromDB,\n                condition: predicateObjs\n              });\n              throw new Error(msg);\n            }\n            return [4 /*yield*/, tx.done];\n          case 11:\n            _b.sent();\n            relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n            return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n          case 12:\n            _b.sent();\n            return [3 /*break*/, 15];\n          case 13:\n            relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n            return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n          case 14:\n            _b.sent();\n            _b.label = 15;\n          case 15:\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 16:\n            _b.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [[model], deletedModels]];\n          case 17:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.deleteItem = function (deleteQueue) {\n    var e_9, _a, e_10, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var connectionStoreNames, tx, _c, _d, deleteItem, storeName, items, store, items_1, items_1_1, item, key, keyValues, itemKey, e_10_1, e_9_1;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            connectionStoreNames = deleteQueue.map(function (_a) {\n              var storeName = _a.storeName;\n              return storeName;\n            });\n            tx = this.db.transaction(__spread(connectionStoreNames), 'readwrite');\n            _e.label = 1;\n          case 1:\n            _e.trys.push([1, 22, 23, 28]);\n            _c = __asyncValues(deleteQueue);\n            _e.label = 2;\n          case 2:\n            return [4 /*yield*/, _c.next()];\n          case 3:\n            if (!(_d = _e.sent(), !_d.done)) return [3 /*break*/, 21];\n            deleteItem = _d.value;\n            storeName = deleteItem.storeName, items = deleteItem.items;\n            store = tx.objectStore(storeName);\n            _e.label = 4;\n          case 4:\n            _e.trys.push([4, 14, 15, 20]);\n            items_1 = __asyncValues(items);\n            _e.label = 5;\n          case 5:\n            return [4 /*yield*/, items_1.next()];\n          case 6:\n            if (!(items_1_1 = _e.sent(), !items_1_1.done)) return [3 /*break*/, 13];\n            item = items_1_1.value;\n            if (!item) return [3 /*break*/, 12];\n            key = void 0;\n            if (!(typeof item === 'object')) return [3 /*break*/, 8];\n            keyValues = this.getIndexKeyValuesFromModel(item);\n            return [4 /*yield*/, store.index('byPk').getKey(this.canonicalKeyPath(keyValues))];\n          case 7:\n            key = _e.sent();\n            return [3 /*break*/, 10];\n          case 8:\n            itemKey = item.toString();\n            return [4 /*yield*/, store.index('byPk').getKey(itemKey)];\n          case 9:\n            key = _e.sent();\n            _e.label = 10;\n          case 10:\n            if (!(key !== undefined)) return [3 /*break*/, 12];\n            return [4 /*yield*/, store.delete(key)];\n          case 11:\n            _e.sent();\n            _e.label = 12;\n          case 12:\n            return [3 /*break*/, 5];\n          case 13:\n            return [3 /*break*/, 20];\n          case 14:\n            e_10_1 = _e.sent();\n            e_10 = {\n              error: e_10_1\n            };\n            return [3 /*break*/, 20];\n          case 15:\n            _e.trys.push([15,, 18, 19]);\n            if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3 /*break*/, 17];\n            return [4 /*yield*/, _b.call(items_1)];\n          case 16:\n            _e.sent();\n            _e.label = 17;\n          case 17:\n            return [3 /*break*/, 19];\n          case 18:\n            if (e_10) throw e_10.error;\n            return [7 /*endfinally*/];\n          case 19:\n            return [7 /*endfinally*/];\n          case 20:\n            return [3 /*break*/, 2];\n          case 21:\n            return [3 /*break*/, 28];\n          case 22:\n            e_9_1 = _e.sent();\n            e_9 = {\n              error: e_9_1\n            };\n            return [3 /*break*/, 28];\n          case 23:\n            _e.trys.push([23,, 26, 27]);\n            if (!(_d && !_d.done && (_a = _c.return))) return [3 /*break*/, 25];\n            return [4 /*yield*/, _a.call(_c)];\n          case 24:\n            _e.sent();\n            _e.label = 25;\n          case 25:\n            return [3 /*break*/, 27];\n          case 26:\n            if (e_9) throw e_9.error;\n            return [7 /*endfinally*/];\n          case 27:\n            return [7 /*endfinally*/];\n          case 28:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {\n    var relations_1, relations_1_1, models_1, models_1_1, models_2, models_2_1;\n    var e_11, _a, e_12, _b, e_13, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var rel, relationType, modelName, targetName, targetNames, associatedWith, storeName, _d, model, hasOneIndex, values, recordToDelete, index, values, value, recordToDelete, modelsToDelete, _e, e_12_1, model, index, keyValues, childRecords, childModels, e_13_1, e_11_1;\n      var _this = this;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            _f.trys.push([0, 42, 43, 48]);\n            relations_1 = __asyncValues(relations);\n            _f.label = 1;\n          case 1:\n            return [4 /*yield*/, relations_1.next()];\n          case 2:\n            if (!(relations_1_1 = _f.sent(), !relations_1_1.done)) return [3 /*break*/, 41];\n            rel = relations_1_1.value;\n            relationType = rel.relationType, modelName = rel.modelName, targetName = rel.targetName, targetNames = rel.targetNames, associatedWith = rel.associatedWith;\n            storeName = getStorename(nameSpace, modelName);\n            _d = relationType;\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3 /*break*/, 3];\n              case 'HAS_MANY':\n                return [3 /*break*/, 23];\n              case 'BELONGS_TO':\n                return [3 /*break*/, 38];\n            }\n            return [3 /*break*/, 39];\n          case 3:\n            _f.trys.push([3, 16, 17, 22]);\n            models_1 = __asyncValues(models);\n            _f.label = 4;\n          case 4:\n            return [4 /*yield*/, models_1.next()];\n          case 5:\n            if (!(models_1_1 = _f.sent(), !models_1_1.done)) return [3 /*break*/, 15];\n            model = models_1_1.value;\n            hasOneIndex = 'byPk';\n            if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 8];\n            values = targetNames.filter(function (targetName) {\n              var _a;\n              return (_a = model[targetName]) !== null && _a !== void 0 ? _a : false;\n            }).map(function (targetName) {\n              return model[targetName];\n            });\n            if (values.length === 0) return [3 /*break*/, 15];\n            return [4 /*yield*/, this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(hasOneIndex).get(this.canonicalKeyPath(values))];\n          case 6:\n            recordToDelete = _f.sent();\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete ? [recordToDelete] : [], modelName, nameSpace, deleteQueue)];\n          case 7:\n            _f.sent();\n            return [3 /*break*/, 15];\n          case 8:\n            index = void 0;\n            values = void 0;\n            if (targetName && targetName in model) {\n              index = hasOneIndex;\n              value = model[targetName];\n              if (value === null) return [3 /*break*/, 15];\n              values = [value];\n            } else {\n              // backwards compatability for older versions of codegen that did not emit targetName for HAS_ONE relations\n              // TODO: can we deprecate this? it's been ~2 years since codegen started including targetName for HAS_ONE\n              // If we deprecate, we'll need to re-gen the MIPR in __tests__/schema.ts > newSchema\n              // otherwise some unit tests will fail\n              index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel);\n              values = this.getIndexKeyValuesFromModel(model);\n            }\n            if (!values || !index) return [3 /*break*/, 15];\n            return [4 /*yield*/, this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(index).get(this.canonicalKeyPath(values))];\n          case 9:\n            recordToDelete = _f.sent();\n            if (!recordToDelete) return [3 /*break*/, 11];\n            return [4 /*yield*/, this.load(nameSpace, modelName, [recordToDelete])];\n          case 10:\n            _e = _f.sent();\n            return [3 /*break*/, 12];\n          case 11:\n            _e = [];\n            _f.label = 12;\n          case 12:\n            modelsToDelete = _e;\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, modelsToDelete, modelName, nameSpace, deleteQueue)];\n          case 13:\n            _f.sent();\n            _f.label = 14;\n          case 14:\n            return [3 /*break*/, 4];\n          case 15:\n            return [3 /*break*/, 22];\n          case 16:\n            e_12_1 = _f.sent();\n            e_12 = {\n              error: e_12_1\n            };\n            return [3 /*break*/, 22];\n          case 17:\n            _f.trys.push([17,, 20, 21]);\n            if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3 /*break*/, 19];\n            return [4 /*yield*/, _b.call(models_1)];\n          case 18:\n            _f.sent();\n            _f.label = 19;\n          case 19:\n            return [3 /*break*/, 21];\n          case 20:\n            if (e_12) throw e_12.error;\n            return [7 /*endfinally*/];\n          case 21:\n            return [7 /*endfinally*/];\n          case 22:\n            return [3 /*break*/, 40];\n          case 23:\n            _f.trys.push([23, 31, 32, 37]);\n            models_2 = __asyncValues(models);\n            _f.label = 24;\n          case 24:\n            return [4 /*yield*/, models_2.next()];\n          case 25:\n            if (!(models_2_1 = _f.sent(), !models_2_1.done)) return [3 /*break*/, 30];\n            model = models_2_1.value;\n            index =\n            // explicit bi-directional @hasMany and @manyToMany\n            getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel) ||\n            // uni and/or implicit @hasMany\n            getIndexFromAssociation(this.schema.namespaces[nameSpace].relationships[modelName].indexes, associatedWith);\n            keyValues = this.getIndexKeyValuesFromModel(model);\n            return [4 /*yield*/, this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(index).getAll(this.canonicalKeyPath(keyValues))];\n          case 26:\n            childRecords = _f.sent();\n            return [4 /*yield*/, this.load(nameSpace, modelName, childRecords)];\n          case 27:\n            childModels = _f.sent();\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, childModels, modelName, nameSpace, deleteQueue)];\n          case 28:\n            _f.sent();\n            _f.label = 29;\n          case 29:\n            return [3 /*break*/, 24];\n          case 30:\n            return [3 /*break*/, 37];\n          case 31:\n            e_13_1 = _f.sent();\n            e_13 = {\n              error: e_13_1\n            };\n            return [3 /*break*/, 37];\n          case 32:\n            _f.trys.push([32,, 35, 36]);\n            if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3 /*break*/, 34];\n            return [4 /*yield*/, _c.call(models_2)];\n          case 33:\n            _f.sent();\n            _f.label = 34;\n          case 34:\n            return [3 /*break*/, 36];\n          case 35:\n            if (e_13) throw e_13.error;\n            return [7 /*endfinally*/];\n          case 36:\n            return [7 /*endfinally*/];\n          case 37:\n            return [3 /*break*/, 40];\n          case 38:\n            // Intentionally blank\n            return [3 /*break*/, 40];\n          case 39:\n            throw new Error(\"Invalid relation type \" + relationType);\n          case 40:\n            return [3 /*break*/, 1];\n          case 41:\n            return [3 /*break*/, 48];\n          case 42:\n            e_11_1 = _f.sent();\n            e_11 = {\n              error: e_11_1\n            };\n            return [3 /*break*/, 48];\n          case 43:\n            _f.trys.push([43,, 46, 47]);\n            if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3 /*break*/, 45];\n            return [4 /*yield*/, _a.call(relations_1)];\n          case 44:\n            _f.sent();\n            _f.label = 45;\n          case 45:\n            return [3 /*break*/, 47];\n          case 46:\n            if (e_11) throw e_11.error;\n            return [7 /*endfinally*/];\n          case 47:\n            return [7 /*endfinally*/];\n          case 48:\n            deleteQueue.push({\n              storeName: getStorename(nameSpace, srcModel),\n              items: models.map(function (record) {\n                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);\n              })\n            });\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.clear = function () {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            (_a = this.db) === null || _a === void 0 ? void 0 : _a.close();\n            return [4 /*yield*/, idb.deleteDB(this.dbName)];\n          case 2:\n            _b.sent();\n            this.db = undefined;\n            this.initPromise = undefined;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.batchSave = function (modelConstructor, items) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, storeName, txn, store, _loop_3, this_1, items_2, items_2_1, item, e_14_1;\n      var e_14, _a;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (items.length === 0) {\n              return [2 /*return*/, []];\n            }\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            result = [];\n            storeName = this.getStorenameForModel(modelConstructor);\n            txn = this.db.transaction(storeName, 'readwrite');\n            store = txn.store;\n            _loop_3 = function _loop_3(item) {\n              var namespaceName, modelName, model, connectedModels, keyValues, _deleted, index, key, instance;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    namespaceName = this_1.namespaceResolver(modelConstructor);\n                    modelName = modelConstructor.name;\n                    model = this_1.modelInstanceCreator(modelConstructor, item);\n                    connectedModels = traverseModel(modelName, model, this_1.schema.namespaces[namespaceName], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);\n                    keyValues = this_1.getIndexKeyValuesFromModel(model);\n                    _deleted = item._deleted;\n                    index = store.index('byPk');\n                    return [4 /*yield*/, index.getKey(this_1.canonicalKeyPath(keyValues))];\n                  case 1:\n                    key = _a.sent();\n                    if (!!_deleted) return [3 /*break*/, 3];\n                    instance = connectedModels.find(function (_a) {\n                      var instance = _a.instance;\n                      var instanceKeyValues = _this.getIndexKeyValuesFromModel(instance);\n                      return keysEqual(instanceKeyValues, keyValues);\n                    }).instance;\n                    result.push([instance, key ? OpType.UPDATE : OpType.INSERT]);\n                    return [4 /*yield*/, store.put(instance, key)];\n                  case 2:\n                    _a.sent();\n                    return [3 /*break*/, 5];\n                  case 3:\n                    result.push([item, OpType.DELETE]);\n                    if (!key) return [3 /*break*/, 5];\n                    return [4 /*yield*/, store.delete(key)];\n                  case 4:\n                    _a.sent();\n                    _a.label = 5;\n                  case 5:\n                    return [2 /*return*/];\n                }\n              });\n            };\n\n            this_1 = this;\n            _b.label = 2;\n          case 2:\n            _b.trys.push([2, 7, 8, 9]);\n            items_2 = __values(items), items_2_1 = items_2.next();\n            _b.label = 3;\n          case 3:\n            if (!!items_2_1.done) return [3 /*break*/, 6];\n            item = items_2_1.value;\n            return [5 /*yield**/, _loop_3(item)];\n          case 4:\n            _b.sent();\n            _b.label = 5;\n          case 5:\n            items_2_1 = items_2.next();\n            return [3 /*break*/, 3];\n          case 6:\n            return [3 /*break*/, 9];\n          case 7:\n            e_14_1 = _b.sent();\n            e_14 = {\n              error: e_14_1\n            };\n            return [3 /*break*/, 9];\n          case 8:\n            try {\n              if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);\n            } finally {\n              if (e_14) throw e_14.error;\n            }\n            return [7 /*endfinally*/];\n          case 9:\n            return [4 /*yield*/, txn.done];\n          case 10:\n            _b.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.createObjectStoreForModel = function (db, namespaceName, storeName, modelName) {\n    var store = db.createObjectStore(storeName, {\n      autoIncrement: true\n    });\n    var indexes = this.schema.namespaces[namespaceName].relationships[modelName].indexes;\n    indexes.forEach(function (_a) {\n      var _b = __read(_a, 3),\n        idxName = _b[0],\n        keyPath = _b[1],\n        options = _b[2];\n      store.createIndex(idxName, keyPath, options);\n    });\n    return store;\n  };\n  return IndexedDBAdapter;\n}();\nexport default new IndexedDBAdapter();","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","idb","ModelPredicateCreator","isPredicateObj","isPredicateGroup","OpType","QueryOne","getIndex","getIndexFromAssociation","isModelConstructor","isPrivateMode","traverseModel","validatePredicate","inMemoryPagination","keysEqual","getStorename","getIndexKeys","extractPrimaryKeyValues","isSafariCompatabilityMode","logger","MULTI_OR_CONDITION_SCAN_BREAKPOINT","DB_NAME","keyArr","_this","safariCompatabilityMode","length","IndexedDBAdapter","modelConstructor","namespace","namespaceResolver","modelName","model","Object","getPrototypeOf","constructor","namespaceName","keys","schema","namespaces","name","then","isPrivate","_a","error","Promise","reject","resolve","_b","debug","storeName","modelNameArr","join","theSchema","modelInstanceCreator","getModelConstructorByModelName","sessionId","checkPrivate","setSafariCompatabilityMode","initPromise","res","rej","dbName","db","VERSION","openDB","upgrade","oldVersion","newVersion","txn","forEach","models","createObjectStoreForModel","objectStoreNames","origStore","objectStore","tmpName","_c","getNamespaceAndModelFromStorename","modelInCurrentSchema","deleteObjectStore","newStore","openCursor","cursor","_e","count","value","put","continue","Set","map","filter","has","error_2","abort","error_1","storeOrStoreName","index","transaction","store","get","canonicalKeyPath","result","condition","getStorenameForModel","connectedModels","set","connectionStoreNames","values","item","instance","add","tx","Array","from","keyValues","getIndexKeyValuesFromModel","_get","fromDB","predicates","getPredicates","predicateObjs","type","isValid","msg","Error","connectionStoreNames_1","resItem","storeName_1","store_1","itemKeyValues","key","fromDB_1","opType","undefined","INSERT","UPDATE","modelKeyValues","getKey","push","done","srcModelName","records","relations","relationships","relationTypes","record","predicate","pagination","keyPath","queryByKey","keyValueFromPredicate","hasSort","sort","hasPagination","limit","getByKey","filterOnPredicate","filtered","getAll","all","enginePagination","load","keyValue","predicateObj","find","p","field","operator","operand","queries","predicateIndex","Map","String","name_1","idx","keypath","isArray","matchingPredicateValues","indexNames","fieldPredicates","o","baseQueryIndex","indexedQueries","groupQueries","objectQueries","matchingIndexQueries","__spread","groupType","_d","candidateResults","distinctResults","indexedQueries_1","query","resultGroup","resultGroup_1","distinctificationString","JSON","stringify","m","page","initialRecord","Math","max","advance","pageResults","hasLimit","firstOrLast","FIRST","modelOrModelConstructor","deleteQueue","nameSpace","deleteTraverse","deleteItem","deletedModels","reduce","acc","items","concat","clear","warn","items_1","itemKey","toString","delete","srcModel","relations_1","rel","relationType","targetName","targetNames","associatedWith","models_1","hasOneIndex","recordToDelete","_f","modelsToDelete","models_2","indexes","childRecords","childModels","close","deleteDB","this_1","_deleted","instanceKeyValues","DELETE","items_2","createObjectStore","autoIncrement","idxName","options","createIndex"],"sources":["/workspace/aws-bootcamp-cruddur-2023/frontend-react-js/node_modules/@aws-amplify/datastore/src/storage/adapter/IndexedDBAdapter.ts"],"sourcesContent":["import { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport * as idb from 'idb';\nimport { ModelInstanceCreator } from '../../datastore/datastore';\nimport { ModelPredicateCreator } from '../../predicates';\nimport {\n\tInternalSchema,\n\tisPredicateObj,\n\tisPredicateGroup,\n\tModelInstanceMetadata,\n\tModelPredicate,\n\tNamespaceResolver,\n\tOpType,\n\tPaginationInput,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tPredicateObject,\n\tPredicatesGroup,\n\tQueryOne,\n\tRelationType,\n} from '../../types';\nimport {\n\tgetIndex,\n\tgetIndexFromAssociation,\n\tisModelConstructor,\n\tisPrivateMode,\n\ttraverseModel,\n\tvalidatePredicate,\n\tinMemoryPagination,\n\tNAMESPACES,\n\tkeysEqual,\n\tgetStorename,\n\tgetIndexKeys,\n\textractPrimaryKeyValues,\n\tisSafariCompatabilityMode,\n} from '../../util';\nimport { Adapter } from './index';\n\nconst logger = new Logger('DataStore');\n\n/**\n * The point after which queries composed of multiple simple OR conditions\n * should scan-and-filter instead of individual queries for each condition.\n *\n * At some point, this should be configurable and/or dynamic based on table\n * size and possibly even on observed average seek latency. For now, it's\n * based on an manual \"binary search\" for the breakpoint as measured in the\n * unit test suite. This isn't necessarily optimal. But, it's at least derived\n * empirically, rather than theoretically and without any verification!\n *\n * REMEMBER! If you run more realistic benchmarks and update this value, update\n * this comment so the validity and accuracy of future query tuning exercises\n * can be compared to the methods used to derive the current value. E.g.,\n *\n * 1. In browser benchmark > unit test benchmark\n * 2. Multi-browser benchmark > single browser benchmark\n * 3. Benchmarks of various table sizes > static table size benchmark\n *\n * etc...\n *\n */\nconst MULTI_OR_CONDITION_SCAN_BREAKPOINT = 7;\n\nconst DB_NAME = 'amplify-datastore';\nclass IndexedDBAdapter implements Adapter {\n\tprivate schema!: InternalSchema;\n\tprivate namespaceResolver!: NamespaceResolver;\n\tprivate modelInstanceCreator!: ModelInstanceCreator;\n\tprivate getModelConstructorByModelName?: (\n\t\tnamsespaceName: NAMESPACES,\n\t\tmodelName: string\n\t) => PersistentModelConstructor<any>;\n\tprivate db!: idb.IDBPDatabase;\n\tprivate initPromise!: Promise<void>;\n\tprivate resolve!: (value?: any) => void;\n\tprivate reject!: (value?: any) => void;\n\tprivate dbName: string = DB_NAME;\n\tprivate safariCompatabilityMode: boolean = false;\n\n\tprivate getStorenameForModel(\n\t\tmodelConstructor: PersistentModelConstructor<any>\n\t) {\n\t\tconst namespace = this.namespaceResolver(modelConstructor);\n\t\tconst { name: modelName } = modelConstructor;\n\n\t\treturn getStorename(namespace, modelName);\n\t}\n\n\t// Retrieves primary key values from a model\n\tprivate getIndexKeyValuesFromModel<T extends PersistentModel>(\n\t\tmodel: T\n\t): string[] {\n\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\tconst keys = getIndexKeys(\n\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\tmodelConstructor.name\n\t\t);\n\n\t\treturn extractPrimaryKeyValues(model, keys);\n\t}\n\n\tprivate async checkPrivate() {\n\t\tconst isPrivate = await isPrivateMode().then(isPrivate => {\n\t\t\treturn isPrivate;\n\t\t});\n\t\tif (isPrivate) {\n\t\t\tlogger.error(\"IndexedDB not supported in this browser's private mode\");\n\t\t\treturn Promise.reject(\n\t\t\t\t\"IndexedDB not supported in this browser's private mode\"\n\t\t\t);\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t * Whether the browser's implementation of IndexedDB is coercing single-field\n\t * indexes to a scalar key.\n\t *\n\t * If this returns `true`, we need to treat indexes containing a single field\n\t * as scalars.\n\t *\n\t * See PR description for reference:\n\t * https://github.com/aws-amplify/amplify-js/pull/10527\n\t */\n\tprivate async setSafariCompatabilityMode() {\n\t\tthis.safariCompatabilityMode = await isSafariCompatabilityMode();\n\n\t\tif (this.safariCompatabilityMode === true) {\n\t\t\tlogger.debug('IndexedDB Adapter is running in Safari Compatability Mode');\n\t\t}\n\t}\n\n\tprivate getNamespaceAndModelFromStorename(storeName: string) {\n\t\tconst [namespaceName, ...modelNameArr] = storeName.split('_');\n\t\treturn {\n\t\t\tnamespaceName,\n\t\t\tmodelName: modelNameArr.join('_'),\n\t\t};\n\t}\n\n\tasync setUp(\n\t\ttheSchema: InternalSchema,\n\t\tnamespaceResolver: NamespaceResolver,\n\t\tmodelInstanceCreator: ModelInstanceCreator,\n\t\tgetModelConstructorByModelName: (\n\t\t\tnamsespaceName: NAMESPACES,\n\t\t\tmodelName: string\n\t\t) => PersistentModelConstructor<any>,\n\t\tsessionId?: string\n\t) {\n\t\tawait this.checkPrivate();\n\t\tawait this.setSafariCompatabilityMode();\n\n\t\tif (!this.initPromise) {\n\t\t\tthis.initPromise = new Promise((res, rej) => {\n\t\t\t\tthis.resolve = res;\n\t\t\t\tthis.reject = rej;\n\t\t\t});\n\t\t} else {\n\t\t\tawait this.initPromise;\n\t\t}\n\t\tif (sessionId) {\n\t\t\tthis.dbName = `${DB_NAME}-${sessionId}`;\n\t\t}\n\t\tthis.schema = theSchema;\n\t\tthis.namespaceResolver = namespaceResolver;\n\t\tthis.modelInstanceCreator = modelInstanceCreator;\n\t\tthis.getModelConstructorByModelName = getModelConstructorByModelName;\n\n\t\ttry {\n\t\t\tif (!this.db) {\n\t\t\t\tconst VERSION = 3;\n\t\t\t\tthis.db = await idb.openDB(this.dbName, VERSION, {\n\t\t\t\t\tupgrade: async (db, oldVersion, newVersion, txn) => {\n\t\t\t\t\t\tif (oldVersion === 0) {\n\t\t\t\t\t\t\tObject.keys(theSchema.namespaces).forEach(namespaceName => {\n\t\t\t\t\t\t\t\tconst namespace = theSchema.namespaces[namespaceName];\n\n\t\t\t\t\t\t\t\tObject.keys(namespace.models).forEach(modelName => {\n\t\t\t\t\t\t\t\t\tconst storeName = getStorename(namespaceName, modelName);\n\t\t\t\t\t\t\t\t\tthis.createObjectStoreForModel(\n\t\t\t\t\t\t\t\t\t\tdb,\n\t\t\t\t\t\t\t\t\t\tnamespaceName,\n\t\t\t\t\t\t\t\t\t\tstoreName,\n\t\t\t\t\t\t\t\t\t\tmodelName\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ((oldVersion === 1 || oldVersion === 2) && newVersion === 3) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tfor (const storeName of txn.objectStoreNames) {\n\t\t\t\t\t\t\t\t\tconst origStore = txn.objectStore(storeName);\n\n\t\t\t\t\t\t\t\t\t// rename original store\n\t\t\t\t\t\t\t\t\tconst tmpName = `tmp_${storeName}`;\n\t\t\t\t\t\t\t\t\torigStore.name = tmpName;\n\n\t\t\t\t\t\t\t\t\tconst { namespaceName, modelName } =\n\t\t\t\t\t\t\t\t\t\tthis.getNamespaceAndModelFromStorename(storeName);\n\n\t\t\t\t\t\t\t\t\tconst modelInCurrentSchema =\n\t\t\t\t\t\t\t\t\t\tmodelName in this.schema.namespaces[namespaceName].models;\n\n\t\t\t\t\t\t\t\t\tif (!modelInCurrentSchema) {\n\t\t\t\t\t\t\t\t\t\t// delete original\n\t\t\t\t\t\t\t\t\t\tdb.deleteObjectStore(tmpName);\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tconst newStore = this.createObjectStoreForModel(\n\t\t\t\t\t\t\t\t\t\tdb,\n\t\t\t\t\t\t\t\t\t\tnamespaceName,\n\t\t\t\t\t\t\t\t\t\tstoreName,\n\t\t\t\t\t\t\t\t\t\tmodelName\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tlet cursor = await origStore.openCursor();\n\t\t\t\t\t\t\t\t\tlet count = 0;\n\n\t\t\t\t\t\t\t\t\t// Copy data from original to new\n\t\t\t\t\t\t\t\t\twhile (cursor && cursor.value) {\n\t\t\t\t\t\t\t\t\t\t// we don't pass key, since they are all new entries in the new store\n\t\t\t\t\t\t\t\t\t\tawait newStore.put(cursor.value);\n\n\t\t\t\t\t\t\t\t\t\tcursor = await cursor.continue();\n\t\t\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// delete original\n\t\t\t\t\t\t\t\t\tdb.deleteObjectStore(tmpName);\n\n\t\t\t\t\t\t\t\t\tlogger.debug(`${count} ${storeName} records migrated`);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// add new models created after IndexedDB, but before migration\n\t\t\t\t\t\t\t\t// this case may happen when a user has not opened an app for\n\t\t\t\t\t\t\t\t// some time and a new model is added during that time\n\t\t\t\t\t\t\t\tObject.keys(theSchema.namespaces).forEach(namespaceName => {\n\t\t\t\t\t\t\t\t\tconst namespace = theSchema.namespaces[namespaceName];\n\t\t\t\t\t\t\t\t\tconst objectStoreNames = new Set(txn.objectStoreNames);\n\n\t\t\t\t\t\t\t\t\tObject.keys(namespace.models)\n\t\t\t\t\t\t\t\t\t\t.map(modelName => {\n\t\t\t\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\t\t\t\t\t\tgetStorename(namespaceName, modelName),\n\t\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.filter(([, storeName]) => !objectStoreNames.has(storeName))\n\t\t\t\t\t\t\t\t\t\t.forEach(([modelName, storeName]) => {\n\t\t\t\t\t\t\t\t\t\t\tthis.createObjectStoreForModel(\n\t\t\t\t\t\t\t\t\t\t\t\tdb,\n\t\t\t\t\t\t\t\t\t\t\t\tnamespaceName,\n\t\t\t\t\t\t\t\t\t\t\t\tstoreName,\n\t\t\t\t\t\t\t\t\t\t\t\tmodelName\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\tlogger.error('Error migrating IndexedDB data', error);\n\t\t\t\t\t\t\t\ttxn.abort();\n\t\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tthis.resolve();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.reject(error);\n\t\t}\n\t}\n\n\tprivate async _get<T>(\n\t\tstoreOrStoreName: idb.IDBPObjectStore | string,\n\t\tkeyArr: string[]\n\t): Promise<T> {\n\t\tlet index: idb.IDBPIndex;\n\n\t\tif (typeof storeOrStoreName === 'string') {\n\t\t\tconst storeName = storeOrStoreName;\n\t\t\tindex = this.db.transaction(storeName, 'readonly').store.index('byPk');\n\t\t} else {\n\t\t\tconst store = storeOrStoreName;\n\t\t\tindex = store.index('byPk');\n\t\t}\n\n\t\tconst result = await index.get(this.canonicalKeyPath(keyArr));\n\n\t\treturn result;\n\t}\n\n\tasync save<T extends PersistentModel>(\n\t\tmodel: T,\n\t\tcondition?: ModelPredicate<T>\n\t): Promise<[T, OpType.INSERT | OpType.UPDATE][]> {\n\t\tawait this.checkPrivate();\n\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\tconst connectedModels = traverseModel(\n\t\t\tmodelConstructor.name,\n\t\t\tmodel,\n\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\tthis.modelInstanceCreator,\n\t\t\tthis.getModelConstructorByModelName!\n\t\t);\n\n\t\tconst set = new Set<string>();\n\t\tconst connectionStoreNames = Object.values(connectedModels).map(\n\t\t\t({ modelName, item, instance }) => {\n\t\t\t\tconst storeName = getStorename(namespaceName, modelName);\n\t\t\t\tset.add(storeName);\n\t\t\t\tconst keys = getIndexKeys(\n\t\t\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\t\t\tmodelName\n\t\t\t\t);\n\t\t\t\treturn { storeName, item, instance, keys };\n\t\t\t}\n\t\t);\n\n\t\tconst tx = this.db.transaction(\n\t\t\t[storeName, ...Array.from(set.values())],\n\t\t\t'readwrite'\n\t\t);\n\t\tconst store = tx.objectStore(storeName);\n\n\t\tconst keyValues = this.getIndexKeyValuesFromModel(model);\n\n\t\tconst fromDB = await this._get(store, keyValues);\n\n\t\tif (condition && fromDB) {\n\t\t\tconst predicates = ModelPredicateCreator.getPredicates(condition);\n\t\t\tconst { predicates: predicateObjs, type } = predicates || {};\n\n\t\t\tconst isValid = validatePredicate(\n\t\t\t\tfromDB as any,\n\t\t\t\ttype as any,\n\t\t\t\tpredicateObjs as any\n\t\t\t);\n\n\t\t\tif (!isValid) {\n\t\t\t\tconst msg = 'Conditional update failed';\n\t\t\t\tlogger.error(msg, { model: fromDB, condition: predicateObjs });\n\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\t\t}\n\n\t\tconst result: [T, OpType.INSERT | OpType.UPDATE][] = [];\n\t\tfor await (const resItem of connectionStoreNames) {\n\t\t\tconst { storeName, item, instance, keys } = resItem;\n\t\t\tconst store = tx.objectStore(storeName);\n\n\t\t\tconst itemKeyValues = keys.map(key => {\n\t\t\t\tconst value = item[key];\n\t\t\t\treturn value;\n\t\t\t});\n\n\t\t\tconst fromDB = <T>await this._get(store, itemKeyValues);\n\t\t\tconst opType: OpType =\n\t\t\t\tfromDB === undefined ? OpType.INSERT : OpType.UPDATE;\n\n\t\t\tconst modelKeyValues = this.getIndexKeyValuesFromModel(model);\n\n\t\t\t// Even if the parent is an INSERT, the child might not be, so we need to get its key\n\t\t\tif (\n\t\t\t\tkeysEqual(itemKeyValues, modelKeyValues) ||\n\t\t\t\topType === OpType.INSERT\n\t\t\t) {\n\t\t\t\tconst key = await store\n\t\t\t\t\t.index('byPk')\n\t\t\t\t\t.getKey(this.canonicalKeyPath(itemKeyValues));\n\t\t\t\tawait store.put(item, key);\n\t\t\t\tresult.push([instance, opType]);\n\t\t\t}\n\t\t}\n\n\t\tawait tx.done;\n\n\t\treturn result;\n\t}\n\n\tprivate async load<T>(\n\t\tnamespaceName: NAMESPACES,\n\t\tsrcModelName: string,\n\t\trecords: T[]\n\t): Promise<T[]> {\n\t\tconst namespace = this.schema.namespaces[namespaceName];\n\t\tconst relations = namespace.relationships![srcModelName].relationTypes;\n\t\tconst connectionStoreNames = relations.map(({ modelName }) => {\n\t\t\treturn getStorename(namespaceName, modelName);\n\t\t});\n\t\tconst modelConstructor = this.getModelConstructorByModelName!(\n\t\t\tnamespaceName,\n\t\t\tsrcModelName\n\t\t);\n\n\t\tif (connectionStoreNames.length === 0) {\n\t\t\treturn records.map(record =>\n\t\t\t\tthis.modelInstanceCreator(modelConstructor, record)\n\t\t\t);\n\t\t}\n\n\t\treturn records.map(record =>\n\t\t\tthis.modelInstanceCreator(modelConstructor, record)\n\t\t);\n\t}\n\n\tasync query<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tpredicate?: ModelPredicate<T>,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tawait this.checkPrivate();\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\t\tconst namespaceName = this.namespaceResolver(\n\t\t\tmodelConstructor\n\t\t) as NAMESPACES;\n\n\t\tconst predicates =\n\t\t\tpredicate && ModelPredicateCreator.getPredicates(predicate);\n\t\tconst keyPath = getIndexKeys(\n\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\tmodelConstructor.name\n\t\t);\n\t\tconst queryByKey =\n\t\t\tpredicates && this.keyValueFromPredicate(predicates, keyPath);\n\n\t\tconst hasSort = pagination && pagination.sort;\n\t\tconst hasPagination = pagination && pagination.limit;\n\n\t\tconst records: T[] = (await (async () => {\n\t\t\t//\n\t\t\t// NOTE: @svidgen explored removing this and letting query() take care of automatic\n\t\t\t// index leveraging. This would eliminate some amount of very similar code.\n\t\t\t// But, getAll is slightly slower than get()\n\t\t\t//\n\t\t\t// On Chrome:\n\t\t\t//   ~700ms vs ~1175ms per 10k reads.\n\t\t\t//\n\t\t\t// You can (and should) check my work here:\n\t\t\t// \thttps://gist.github.com/svidgen/74e55d573b19c3e5432b1b5bdf0f4d96\n\t\t\t//\n\t\t\tif (queryByKey) {\n\t\t\t\tconst record = await this.getByKey(storeName, queryByKey);\n\t\t\t\treturn record ? [record] : [];\n\t\t\t}\n\n\t\t\tif (predicates) {\n\t\t\t\tconst filtered = await this.filterOnPredicate(storeName, predicates);\n\t\t\t\treturn this.inMemoryPagination(filtered, pagination);\n\t\t\t}\n\n\t\t\tif (hasSort) {\n\t\t\t\tconst all = await this.getAll(storeName);\n\t\t\t\treturn this.inMemoryPagination(all, pagination);\n\t\t\t}\n\n\t\t\tif (hasPagination) {\n\t\t\t\treturn this.enginePagination(storeName, pagination);\n\t\t\t}\n\n\t\t\treturn this.getAll(storeName);\n\t\t})()) as T[];\n\n\t\treturn await this.load(namespaceName, modelConstructor.name, records);\n\t}\n\n\tprivate async getByKey<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tkeyValue: string[]\n\t): Promise<T> {\n\t\treturn <T>await this._get(storeName, keyValue);\n\t}\n\n\tprivate async getAll<T extends PersistentModel>(\n\t\tstoreName: string\n\t): Promise<T[]> {\n\t\treturn await this.db.getAll(storeName);\n\t}\n\n\tprivate keyValueFromPredicate<T extends PersistentModel>(\n\t\tpredicates: PredicatesGroup<T>,\n\t\tkeyPath: string[]\n\t): string[] | undefined {\n\t\tconst { predicates: predicateObjs } = predicates;\n\n\t\tif (predicateObjs.length !== keyPath.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst keyValues = [] as any[];\n\n\t\tfor (const key of keyPath) {\n\t\t\tconst predicateObj = predicateObjs.find(\n\t\t\t\tp =>\n\t\t\t\t\t// it's a relevant predicate object only if it's an equality\n\t\t\t\t\t// operation for a key field from the key:\n\t\t\t\t\tisPredicateObj(p) &&\n\t\t\t\t\tp.field === key &&\n\t\t\t\t\tp.operator === 'eq' &&\n\t\t\t\t\t// it's only valid if it's not nullish.\n\t\t\t\t\t// (IDB will throw a fit if it's nullish.)\n\t\t\t\t\tp.operand !== null &&\n\t\t\t\t\tp.operand !== undefined\n\t\t\t) as PredicateObject<T>;\n\n\t\t\tpredicateObj && keyValues.push(predicateObj.operand);\n\t\t}\n\n\t\treturn keyValues.length === keyPath.length ? keyValues : undefined;\n\t}\n\n\t/**\n\t * Tries to generate an index fetcher for the given predicates. Assumes\n\t * that the given predicate conditions are contained by an AND group and\n\t * should therefore all match a single record.\n\t *\n\t * @param storeName The table to query.\n\t * @param predicates The predicates to try to AND together.\n\t * @param transaction\n\t */\n\tprivate matchingIndexQueries<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpredicates: PredicateObject<T>[],\n\t\ttransaction: idb.IDBPTransaction<unknown, [string]>\n\t) {\n\t\t// could be expanded later to include `exec()` and a `cardinality` estimate?\n\t\tconst queries: (() => Promise<T[]>)[] = [];\n\n\t\tconst predicateIndex = new Map<string, PredicateObject<T>>();\n\t\tfor (const predicate of predicates) {\n\t\t\tpredicateIndex.set(String(predicate.field), predicate);\n\t\t}\n\n\t\tconst store = transaction.objectStore(storeName);\n\t\tfor (const name of store.indexNames) {\n\t\t\tconst idx = store.index(name);\n\t\t\tconst keypath = Array.isArray(idx.keyPath) ? idx.keyPath : [idx.keyPath];\n\t\t\tconst matchingPredicateValues: (string | number)[] = [];\n\n\t\t\tfor (const field of keypath) {\n\t\t\t\tconst p = predicateIndex.get(field);\n\t\t\t\tif (p && p.operand !== null && p.operand !== undefined) {\n\t\t\t\t\tmatchingPredicateValues.push(p.operand);\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if we have a matching predicate field for each component of this index,\n\t\t\t// we can build a query for it. otherwise, we can't.\n\t\t\tif (matchingPredicateValues.length === keypath.length) {\n\t\t\t\t// re-create a transaction, because the transaction used to fetch the\n\t\t\t\t// indexes may no longer be active.\n\t\t\t\tqueries.push(() =>\n\t\t\t\t\tthis.db\n\t\t\t\t\t\t.transaction(storeName)\n\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t.index(name)\n\t\t\t\t\t\t.getAll(this.canonicalKeyPath(matchingPredicateValues))\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn queries;\n\t}\n\n\tprivate async baseQueryIndex<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpredicates: PredicatesGroup<T>,\n\t\ttransaction?: idb.IDBPTransaction<unknown, [string]> | undefined\n\t) {\n\t\tlet { predicates: predicateObjs, type } = predicates;\n\n\t\t// the predicate objects we care about tend to be nested at least\n\t\t// one level down: `{and: {or: {and: { <the predicates we want> }}}}`\n\t\t// so, we unpack and/or groups until we find a group with more than 1\n\t\t// child OR a child that is not a group (and is therefore a predicate \"object\").\n\t\twhile (\n\t\t\tpredicateObjs.length === 1 &&\n\t\t\tisPredicateGroup(predicateObjs[0]) &&\n\t\t\t(predicateObjs[0] as PredicatesGroup<T>).type !== 'not'\n\t\t) {\n\t\t\ttype = (predicateObjs[0] as PredicatesGroup<T>).type;\n\t\t\tpredicateObjs = (predicateObjs[0] as PredicatesGroup<T>).predicates;\n\t\t}\n\n\t\tconst fieldPredicates = predicateObjs.filter(\n\t\t\tp => isPredicateObj(p) && p.operator === 'eq'\n\t\t) as PredicateObject<T>[];\n\n\t\t// several sub-queries could occur here. explicitly start a txn here to avoid\n\t\t// opening/closing multiple txns.\n\t\tconst txn = transaction || this.db.transaction(storeName);\n\n\t\tlet result = {} as {\n\t\t\tgroupType: typeof type | null;\n\t\t\tindexedQueries: (() => Promise<T[]>)[];\n\t\t};\n\n\t\t// `or` conditions, if usable, need to generate multiple queries. this is unlike\n\t\t// `and` conditions, which should just be combined.\n\t\tif (type === 'or') {\n\t\t\t/**\n\t\t\t * Base queries for each child group.\n\t\t\t *\n\t\t\t * For each child group, if it's an AND condition that results in a single\n\t\t\t * subordinate \"base query\", we can use it. if it's any more complicated\n\t\t\t * than that, it's not a simple join condition we want to use.\n\t\t\t */\n\t\t\tconst groupQueries = await Promise.all(\n\t\t\t\tpredicateObjs\n\t\t\t\t\t.filter(o => isPredicateGroup(o) && o.type === 'and')\n\t\t\t\t\t.map(o =>\n\t\t\t\t\t\tthis.baseQueryIndex(storeName, o as PredicatesGroup<T>, txn)\n\t\t\t\t\t)\n\t\t\t).then(queries =>\n\t\t\t\tqueries\n\t\t\t\t\t.filter(q => q.indexedQueries.length === 1)\n\t\t\t\t\t.map(i => i.indexedQueries)\n\t\t\t);\n\n\t\t\t/**\n\t\t\t * Base queries for each simple child \"object\" (field condition).\n\t\t\t */\n\t\t\tconst objectQueries = predicateObjs\n\t\t\t\t.filter(o => isPredicateObj(o))\n\t\t\t\t.map(o =>\n\t\t\t\t\tthis.matchingIndexQueries(storeName, [o as PredicateObject<T>], txn)\n\t\t\t\t);\n\n\t\t\tconst indexedQueries = [...groupQueries, ...objectQueries]\n\t\t\t\t.map(q => q[0])\n\t\t\t\t.filter(i => i);\n\n\t\t\t// if, after hunting for base queries, we don't have exactly 1 base query\n\t\t\t// for each child group + object, stop trying to optimize. we're not dealing\n\t\t\t// with a simple query that fits the intended optimization path.\n\t\t\tif (predicateObjs.length > indexedQueries.length) {\n\t\t\t\tresult = {\n\t\t\t\t\tgroupType: null,\n\t\t\t\t\tindexedQueries: [] as (() => Promise<T[]>)[],\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tresult = {\n\t\t\t\t\tgroupType: 'or',\n\t\t\t\t\tindexedQueries,\n\t\t\t\t};\n\t\t\t}\n\t\t} else if (type === 'and') {\n\t\t\t// our potential indexes or lacks thereof.\n\t\t\t// note that we're only optimizing for `eq` right now.\n\t\t\tresult = {\n\t\t\t\tgroupType: type,\n\t\t\t\tindexedQueries: this.matchingIndexQueries(\n\t\t\t\t\tstoreName,\n\t\t\t\t\tfieldPredicates,\n\t\t\t\t\ttxn\n\t\t\t\t),\n\t\t\t};\n\t\t} else {\n\t\t\tresult = {\n\t\t\t\tgroupType: null,\n\t\t\t\tindexedQueries: [],\n\t\t\t};\n\t\t}\n\n\t\t// Explicitly wait for txns from index queries to complete before proceding.\n\t\t// This helps ensure IndexedDB is in a stable, ready state. Else, subseqeuent\n\t\t// qeuries can sometimes appear to deadlock (at least in FakeIndexedDB).\n\t\t// (Unless we were *given* the transaction -- we'll assume the parent handles it.)\n\t\tif (!transaction) await txn.done;\n\n\t\treturn result;\n\t}\n\n\tprivate async filterOnPredicate<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpredicates: PredicatesGroup<T>\n\t) {\n\t\tconst { predicates: predicateObjs, type } = predicates;\n\n\t\tconst { groupType, indexedQueries } = await this.baseQueryIndex(\n\t\t\tstoreName,\n\t\t\tpredicates\n\t\t);\n\n\t\t// where we'll accumulate candidate results, which will be filtered at the end.\n\t\tlet candidateResults: T[];\n\n\t\t// semi-naive implementation:\n\t\tif (groupType === 'and' && indexedQueries.length > 0) {\n\t\t\t// each condition must be satsified, we can form a base set with any\n\t\t\t// ONE of those conditions and then filter.\n\t\t\tcandidateResults = await indexedQueries[0]();\n\t\t} else if (\n\t\t\tgroupType === 'or' &&\n\t\t\tindexedQueries.length > 0 &&\n\t\t\tindexedQueries.length <= MULTI_OR_CONDITION_SCAN_BREAKPOINT\n\t\t) {\n\t\t\t// NOTE: each condition implies a potentially distinct set. we only benefit\n\t\t\t// from using indexes here if EVERY condition uses an index. if any one\n\t\t\t// index requires a table scan, we gain nothing from the indexes.\n\t\t\t// NOTE: results must be DISTINCT-ified if we leverage indexes.\n\t\t\tconst distinctResults = new Map<string, T>();\n\t\t\tfor (const query of indexedQueries) {\n\t\t\t\tconst resultGroup = await query();\n\t\t\t\tfor (const item of resultGroup) {\n\t\t\t\t\tconst distinctificationString = JSON.stringify(item);\n\t\t\t\t\tdistinctResults.set(distinctificationString, item);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// we could conceivably check for special conditions and return early here.\n\t\t\t// but, this is simpler and has not yet had a measurable performance impact.\n\t\t\tcandidateResults = Array.from(distinctResults.values());\n\t\t} else {\n\t\t\t// nothing intelligent we can do with `not` groups unless or until we start\n\t\t\t// smashing comparison operators against indexes -- at which point we could\n\t\t\t// perform some reversal here.\n\t\t\tcandidateResults = <T[]>await this.getAll(storeName);\n\t\t}\n\n\t\tconst filtered = predicateObjs\n\t\t\t? candidateResults.filter(m => validatePredicate(m, type, predicateObjs))\n\t\t\t: candidateResults;\n\n\t\treturn filtered;\n\t}\n\n\tprivate inMemoryPagination<T extends PersistentModel>(\n\t\trecords: T[],\n\t\tpagination?: PaginationInput<T>\n\t): T[] {\n\t\treturn inMemoryPagination(records, pagination);\n\t}\n\n\tprivate async enginePagination<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tlet result: T[];\n\n\t\tif (pagination) {\n\t\t\tconst { page = 0, limit = 0 } = pagination;\n\t\t\tconst initialRecord = Math.max(0, page * limit) || 0;\n\n\t\t\tlet cursor = await this.db\n\t\t\t\t.transaction(storeName)\n\t\t\t\t.objectStore(storeName)\n\t\t\t\t.openCursor();\n\n\t\t\tif (cursor && initialRecord > 0) {\n\t\t\t\tawait cursor.advance(initialRecord);\n\t\t\t}\n\n\t\t\tconst pageResults: T[] = [];\n\t\t\tconst hasLimit = typeof limit === 'number' && limit > 0;\n\n\t\t\twhile (cursor && cursor.value) {\n\t\t\t\tpageResults.push(cursor.value);\n\n\t\t\t\tif (hasLimit && pageResults.length === limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcursor = await cursor.continue();\n\t\t\t}\n\n\t\t\tresult = pageResults;\n\t\t} else {\n\t\t\tresult = <T[]>await this.db.getAll(storeName);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync queryOne<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tfirstOrLast: QueryOne = QueryOne.FIRST\n\t): Promise<T | undefined> {\n\t\tawait this.checkPrivate();\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\tconst cursor = await this.db\n\t\t\t.transaction([storeName], 'readonly')\n\t\t\t.objectStore(storeName)\n\t\t\t.openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev');\n\n\t\tconst result = cursor ? <T>cursor.value : undefined;\n\n\t\treturn result && this.modelInstanceCreator(modelConstructor, result);\n\t}\n\n\tasync delete<T extends PersistentModel>(\n\t\tmodelOrModelConstructor: T | PersistentModelConstructor<T>,\n\t\tcondition?: ModelPredicate<T>\n\t): Promise<[T[], T[]]> {\n\t\tawait this.checkPrivate();\n\t\tconst deleteQueue: { storeName: string; items: T[] }[] = [];\n\n\t\tif (isModelConstructor(modelOrModelConstructor)) {\n\t\t\tconst modelConstructor =\n\t\t\t\tmodelOrModelConstructor as PersistentModelConstructor<T>;\n\t\t\tconst nameSpace = this.namespaceResolver(modelConstructor) as NAMESPACES;\n\n\t\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\t\tconst models = await this.query(modelConstructor, condition);\n\t\t\tconst relations =\n\t\t\t\tthis.schema.namespaces![nameSpace].relationships![modelConstructor.name]\n\t\t\t\t\t.relationTypes;\n\n\t\t\tif (condition !== undefined) {\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\tmodels,\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\n\t\t\t\tawait this.deleteItem(deleteQueue);\n\n\t\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t\t<T[]>[]\n\t\t\t\t);\n\n\t\t\t\treturn [models, deletedModels];\n\t\t\t} else {\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\tmodels,\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\n\t\t\t\t// Delete all\n\t\t\t\tawait this.db\n\t\t\t\t\t.transaction([storeName], 'readwrite')\n\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t.clear();\n\n\t\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t\t<T[]>[]\n\t\t\t\t);\n\n\t\t\t\treturn [models, deletedModels];\n\t\t\t}\n\t\t} else {\n\t\t\tconst model = modelOrModelConstructor as T;\n\n\t\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\t\tconst namespaceName = this.namespaceResolver(\n\t\t\t\tmodelConstructor\n\t\t\t) as NAMESPACES;\n\n\t\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\t\tif (condition) {\n\t\t\t\tconst tx = this.db.transaction([storeName], 'readwrite');\n\t\t\t\tconst store = tx.objectStore(storeName);\n\t\t\t\tconst keyValues = this.getIndexKeyValuesFromModel(model);\n\n\t\t\t\tconst fromDB = await this._get(store, keyValues);\n\n\t\t\t\tif (fromDB === undefined) {\n\t\t\t\t\tconst msg = 'Model instance not found in storage';\n\t\t\t\t\tlogger.warn(msg, { model });\n\n\t\t\t\t\treturn [[model], []];\n\t\t\t\t}\n\n\t\t\t\tconst predicates = ModelPredicateCreator.getPredicates(condition);\n\t\t\t\tconst { predicates: predicateObjs, type } =\n\t\t\t\t\tpredicates as PredicatesGroup<T>;\n\n\t\t\t\tconst isValid = validatePredicate(fromDB as T, type, predicateObjs);\n\n\t\t\t\tif (!isValid) {\n\t\t\t\t\tconst msg = 'Conditional update failed';\n\t\t\t\t\tlogger.error(msg, { model: fromDB, condition: predicateObjs });\n\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\t\t\t\tawait tx.done;\n\n\t\t\t\tconst relations =\n\t\t\t\t\tthis.schema.namespaces[namespaceName].relationships![\n\t\t\t\t\t\tmodelConstructor.name\n\t\t\t\t\t].relationTypes;\n\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\t[model],\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnamespaceName,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst relations =\n\t\t\t\t\tthis.schema.namespaces[namespaceName].relationships![\n\t\t\t\t\t\tmodelConstructor.name\n\t\t\t\t\t].relationTypes;\n\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\t[model],\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnamespaceName,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tawait this.deleteItem(deleteQueue);\n\n\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t<T[]>[]\n\t\t\t);\n\n\t\t\treturn [[model], deletedModels];\n\t\t}\n\t}\n\n\tprivate async deleteItem<T extends PersistentModel>(\n\t\tdeleteQueue?: {\n\t\t\tstoreName: string;\n\t\t\titems: T[] | IDBValidKey[];\n\t\t}[]\n\t) {\n\t\tconst connectionStoreNames = deleteQueue!.map(({ storeName }) => {\n\t\t\treturn storeName;\n\t\t});\n\n\t\tconst tx = this.db.transaction([...connectionStoreNames], 'readwrite');\n\t\tfor await (const deleteItem of deleteQueue!) {\n\t\t\tconst { storeName, items } = deleteItem;\n\t\t\tconst store = tx.objectStore(storeName);\n\n\t\t\tfor await (const item of items) {\n\t\t\t\tif (item) {\n\t\t\t\t\tlet key: IDBValidKey | undefined;\n\n\t\t\t\t\tif (typeof item === 'object') {\n\t\t\t\t\t\tconst keyValues = this.getIndexKeyValuesFromModel(item as T);\n\t\t\t\t\t\tkey = await store\n\t\t\t\t\t\t\t.index('byPk')\n\t\t\t\t\t\t\t.getKey(this.canonicalKeyPath(keyValues));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst itemKey = item.toString();\n\t\t\t\t\t\tkey = await store.index('byPk').getKey(itemKey);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (key !== undefined) {\n\t\t\t\t\t\tawait store.delete(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async deleteTraverse<T extends PersistentModel>(\n\t\trelations: RelationType[],\n\t\tmodels: T[],\n\t\tsrcModel: string,\n\t\tnameSpace: NAMESPACES,\n\t\tdeleteQueue: { storeName: string; items: T[] }[]\n\t): Promise<void> {\n\t\tfor await (const rel of relations) {\n\t\t\tconst {\n\t\t\t\trelationType,\n\t\t\t\tmodelName,\n\t\t\t\ttargetName,\n\t\t\t\ttargetNames,\n\t\t\t\tassociatedWith,\n\t\t\t} = rel;\n\n\t\t\tconst storeName = getStorename(nameSpace, modelName);\n\n\t\t\tswitch (relationType) {\n\t\t\t\tcase 'HAS_ONE':\n\t\t\t\t\tfor await (const model of models) {\n\t\t\t\t\t\tconst hasOneIndex = 'byPk';\n\n\t\t\t\t\t\tif (targetNames?.length) {\n\t\t\t\t\t\t\t// CPK codegen\n\t\t\t\t\t\t\tconst values = targetNames\n\t\t\t\t\t\t\t\t.filter(targetName => model[targetName] ?? false)\n\t\t\t\t\t\t\t\t.map(targetName => model[targetName]);\n\n\t\t\t\t\t\t\tif (values.length === 0) break;\n\n\t\t\t\t\t\t\tconst recordToDelete = <T>(\n\t\t\t\t\t\t\t\tawait this.db\n\t\t\t\t\t\t\t\t\t.transaction(storeName, 'readwrite')\n\t\t\t\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t\t\t\t.index(hasOneIndex)\n\t\t\t\t\t\t\t\t\t.get(this.canonicalKeyPath(values))\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName]\n\t\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\t\trecordToDelete ? [recordToDelete] : [],\n\t\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// PRE-CPK codegen\n\t\t\t\t\t\t\tlet index;\n\t\t\t\t\t\t\tlet values: string[];\n\n\t\t\t\t\t\t\tif (targetName && targetName in model) {\n\t\t\t\t\t\t\t\tindex = hasOneIndex;\n\t\t\t\t\t\t\t\tconst value = model[targetName];\n\t\t\t\t\t\t\t\tif (value === null) break;\n\t\t\t\t\t\t\t\tvalues = [value];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// backwards compatability for older versions of codegen that did not emit targetName for HAS_ONE relations\n\t\t\t\t\t\t\t\t// TODO: can we deprecate this? it's been ~2 years since codegen started including targetName for HAS_ONE\n\t\t\t\t\t\t\t\t// If we deprecate, we'll need to re-gen the MIPR in __tests__/schema.ts > newSchema\n\t\t\t\t\t\t\t\t// otherwise some unit tests will fail\n\t\t\t\t\t\t\t\tindex = getIndex(\n\t\t\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName]\n\t\t\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\t\t\tsrcModel\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tvalues = this.getIndexKeyValuesFromModel(model);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!values || !index) break;\n\n\t\t\t\t\t\t\tconst recordToDelete = <T>(\n\t\t\t\t\t\t\t\tawait this.db\n\t\t\t\t\t\t\t\t\t.transaction(storeName, 'readwrite')\n\t\t\t\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t\t\t\t.index(index)\n\t\t\t\t\t\t\t\t\t.get(this.canonicalKeyPath(values))\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// instantiate models before passing to deleteTraverse\n\t\t\t\t\t\t\t// necessary for extracting PK values via getIndexKeyValuesFromModel\n\t\t\t\t\t\t\tconst modelsToDelete = recordToDelete\n\t\t\t\t\t\t\t\t? await this.load(nameSpace, modelName, [recordToDelete])\n\t\t\t\t\t\t\t\t: [];\n\n\t\t\t\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName]\n\t\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\t\tmodelsToDelete,\n\t\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'HAS_MANY':\n\t\t\t\t\tfor await (const model of models) {\n\t\t\t\t\t\tconst index =\n\t\t\t\t\t\t\t// explicit bi-directional @hasMany and @manyToMany\n\t\t\t\t\t\t\tgetIndex(\n\t\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName]\n\t\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\t\tsrcModel\n\t\t\t\t\t\t\t) ||\n\t\t\t\t\t\t\t// uni and/or implicit @hasMany\n\t\t\t\t\t\t\tgetIndexFromAssociation(\n\t\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName]\n\t\t\t\t\t\t\t\t\t.indexes,\n\t\t\t\t\t\t\t\tassociatedWith!\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tconst keyValues = this.getIndexKeyValuesFromModel(model);\n\n\t\t\t\t\t\tconst childRecords = await this.db\n\t\t\t\t\t\t\t.transaction(storeName, 'readwrite')\n\t\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t\t.index(index as string)\n\t\t\t\t\t\t\t.getAll(this.canonicalKeyPath(keyValues));\n\n\t\t\t\t\t\t// instantiate models before passing to deleteTraverse\n\t\t\t\t\t\t// necessary for extracting PK values via getIndexKeyValuesFromModel\n\t\t\t\t\t\tconst childModels = await this.load(\n\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\tchildRecords\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName]\n\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\tchildModels,\n\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BELONGS_TO':\n\t\t\t\t\t// Intentionally blank\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Invalid relation type ${relationType}`);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tdeleteQueue.push({\n\t\t\tstoreName: getStorename(nameSpace, srcModel),\n\t\t\titems: models.map(record =>\n\t\t\t\tthis.modelInstanceCreator(\n\t\t\t\t\tthis.getModelConstructorByModelName!(nameSpace, srcModel),\n\t\t\t\t\trecord\n\t\t\t\t)\n\t\t\t),\n\t\t});\n\t}\n\n\tasync clear(): Promise<void> {\n\t\tawait this.checkPrivate();\n\n\t\tthis.db?.close();\n\n\t\tawait idb.deleteDB(this.dbName);\n\n\t\tthis.db = undefined!;\n\t\tthis.initPromise = undefined!;\n\t}\n\n\tasync batchSave<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<any>,\n\t\titems: ModelInstanceMetadata[]\n\t): Promise<[T, OpType][]> {\n\t\tif (items.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tawait this.checkPrivate();\n\n\t\tconst result: [T, OpType][] = [];\n\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\tconst txn = this.db.transaction(storeName, 'readwrite');\n\t\tconst store = txn.store;\n\n\t\tfor (const item of items) {\n\t\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\t\t\tconst modelName = modelConstructor.name;\n\t\t\tconst model = this.modelInstanceCreator(modelConstructor, item);\n\n\t\t\tconst connectedModels = traverseModel(\n\t\t\t\tmodelName,\n\t\t\t\tmodel,\n\t\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\t\tthis.modelInstanceCreator,\n\t\t\t\tthis.getModelConstructorByModelName!\n\t\t\t);\n\n\t\t\tconst keyValues = this.getIndexKeyValuesFromModel(model);\n\t\t\tconst { _deleted } = item;\n\n\t\t\tconst index = store.index('byPk');\n\n\t\t\tconst key = await index.getKey(this.canonicalKeyPath(keyValues));\n\n\t\t\tif (!_deleted) {\n\t\t\t\tconst { instance } = connectedModels.find(({ instance }) => {\n\t\t\t\t\tconst instanceKeyValues = this.getIndexKeyValuesFromModel(instance);\n\t\t\t\t\treturn keysEqual(instanceKeyValues, keyValues);\n\t\t\t\t})!;\n\n\t\t\t\tresult.push([\n\t\t\t\t\t<T>(<unknown>instance),\n\t\t\t\t\tkey ? OpType.UPDATE : OpType.INSERT,\n\t\t\t\t]);\n\t\t\t\tawait store.put(instance, key);\n\t\t\t} else {\n\t\t\t\tresult.push([<T>(<unknown>item), OpType.DELETE]);\n\n\t\t\t\tif (key) {\n\t\t\t\t\tawait store.delete(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait txn.done;\n\n\t\treturn result;\n\t}\n\n\tprivate createObjectStoreForModel(\n\t\tdb: idb.IDBPDatabase,\n\t\tnamespaceName: string,\n\t\tstoreName: string,\n\t\tmodelName: string\n\t) {\n\t\tconst store = db.createObjectStore(storeName, {\n\t\t\tautoIncrement: true,\n\t\t});\n\n\t\tconst { indexes } =\n\t\t\tthis.schema.namespaces[namespaceName].relationships![modelName];\n\n\t\tindexes.forEach(([idxName, keyPath, options]) => {\n\t\t\tstore.createIndex(idxName, keyPath, options);\n\t\t});\n\n\t\treturn store;\n\t}\n\n\t/**\n\t * Checks the given path against the browser's IndexedDB implementation for\n\t * necessary compatibility transformations, applying those transforms if needed.\n\t *\n\t * @param `keyArr` strings to compatibilize for browser-indexeddb index operations\n\t * @returns An array or string, depending on and given key,\n\t * that is ensured to be compatible with the IndexedDB implementation's nuances.\n\t */\n\tprivate canonicalKeyPath = (keyArr: (string | number)[]) => {\n\t\tif (this.safariCompatabilityMode) {\n\t\t\treturn keyArr.length > 1 ? keyArr : keyArr[0];\n\t\t}\n\t\treturn keyArr;\n\t};\n}\n\nexport default new IndexedDBAdapter();\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}