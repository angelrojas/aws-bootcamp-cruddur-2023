{"ast":null,"code":"import _slicedToArray from \"/workspace/aws-bootcamp-cruddur-2023/frontend-react-js/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/workspace/aws-bootcamp-cruddur-2023/frontend-react-js/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/workspace/aws-bootcamp-cruddur-2023/frontend-react-js/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/workspace/aws-bootcamp-cruddur-2023/frontend-react-js/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _objectWithoutProperties from \"/workspace/aws-bootcamp-cruddur-2023/frontend-react-js/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"base\"],\n  _excluded2 = [\"padTo\", \"floor\"];\nimport { padStart, roundTo, hasRelative } from \"./util.js\";\nimport * as English from \"./english.js\";\nimport Settings from \"../settings.js\";\nimport DateTime from \"../datetime.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\n\n// todo - remap caching\n\nvar intlLFCache = {};\nfunction getCachedLF(locString) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var key = JSON.stringify([locString, opts]);\n  var dtf = intlLFCache[key];\n  if (!dtf) {\n    dtf = new Intl.ListFormat(locString, opts);\n    intlLFCache[key] = dtf;\n  }\n  return dtf;\n}\nvar intlDTCache = {};\nfunction getCachedDTF(locString) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var key = JSON.stringify([locString, opts]);\n  var dtf = intlDTCache[key];\n  if (!dtf) {\n    dtf = new Intl.DateTimeFormat(locString, opts);\n    intlDTCache[key] = dtf;\n  }\n  return dtf;\n}\nvar intlNumCache = {};\nfunction getCachedINF(locString) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var key = JSON.stringify([locString, opts]);\n  var inf = intlNumCache[key];\n  if (!inf) {\n    inf = new Intl.NumberFormat(locString, opts);\n    intlNumCache[key] = inf;\n  }\n  return inf;\n}\nvar intlRelCache = {};\nfunction getCachedRTF(locString) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var base = opts.base,\n    cacheKeyOpts = _objectWithoutProperties(opts, _excluded); // exclude `base` from the options\n  var key = JSON.stringify([locString, cacheKeyOpts]);\n  var inf = intlRelCache[key];\n  if (!inf) {\n    inf = new Intl.RelativeTimeFormat(locString, opts);\n    intlRelCache[key] = inf;\n  }\n  return inf;\n}\nvar sysLocaleCache = null;\nfunction systemLocale() {\n  if (sysLocaleCache) {\n    return sysLocaleCache;\n  } else {\n    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;\n    return sysLocaleCache;\n  }\n}\nfunction parseLocaleString(localeStr) {\n  // I really want to avoid writing a BCP 47 parser\n  // see, e.g. https://github.com/wooorm/bcp-47\n  // Instead, we'll do this:\n\n  // a) if the string has no -u extensions, just leave it alone\n  // b) if it does, use Intl to resolve everything\n  // c) if Intl fails, try again without the -u\n\n  var uIndex = localeStr.indexOf(\"-u-\");\n  if (uIndex === -1) {\n    return [localeStr];\n  } else {\n    var options;\n    var smaller = localeStr.substring(0, uIndex);\n    try {\n      options = getCachedDTF(localeStr).resolvedOptions();\n    } catch (e) {\n      options = getCachedDTF(smaller).resolvedOptions();\n    }\n    var _options = options,\n      numberingSystem = _options.numberingSystem,\n      calendar = _options.calendar;\n    // return the smaller one so that we can append the calendar and numbering overrides to it\n    return [smaller, numberingSystem, calendar];\n  }\n}\nfunction intlConfigString(localeStr, numberingSystem, outputCalendar) {\n  if (outputCalendar || numberingSystem) {\n    localeStr += \"-u\";\n    if (outputCalendar) {\n      localeStr += \"-ca-\".concat(outputCalendar);\n    }\n    if (numberingSystem) {\n      localeStr += \"-nu-\".concat(numberingSystem);\n    }\n    return localeStr;\n  } else {\n    return localeStr;\n  }\n}\nfunction mapMonths(f) {\n  var ms = [];\n  for (var i = 1; i <= 12; i++) {\n    var dt = DateTime.utc(2016, i, 1);\n    ms.push(f(dt));\n  }\n  return ms;\n}\nfunction mapWeekdays(f) {\n  var ms = [];\n  for (var i = 1; i <= 7; i++) {\n    var dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n  return ms;\n}\nfunction listStuff(loc, length, defaultOK, englishFn, intlFn) {\n  var mode = loc.listingMode(defaultOK);\n  if (mode === \"error\") {\n    return null;\n  } else if (mode === \"en\") {\n    return englishFn(length);\n  } else {\n    return intlFn(length);\n  }\n}\nfunction supportsFastNumbers(loc) {\n  if (loc.numberingSystem && loc.numberingSystem !== \"latn\") {\n    return false;\n  } else {\n    return loc.numberingSystem === \"latn\" || !loc.locale || loc.locale.startsWith(\"en\") || new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === \"latn\";\n  }\n}\n\n/**\n * @private\n */\nvar PolyNumberFormatter = /*#__PURE__*/function () {\n  function PolyNumberFormatter(intl, forceSimple, opts) {\n    _classCallCheck(this, PolyNumberFormatter);\n    this.padTo = opts.padTo || 0;\n    this.floor = opts.floor || false;\n    var padTo = opts.padTo,\n      floor = opts.floor,\n      otherOpts = _objectWithoutProperties(opts, _excluded2);\n    if (!forceSimple || Object.keys(otherOpts).length > 0) {\n      var intlOpts = _objectSpread({\n        useGrouping: false\n      }, opts);\n      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;\n      this.inf = getCachedINF(intl, intlOpts);\n    }\n  }\n  _createClass(PolyNumberFormatter, [{\n    key: \"format\",\n    value: function format(i) {\n      if (this.inf) {\n        var fixed = this.floor ? Math.floor(i) : i;\n        return this.inf.format(fixed);\n      } else {\n        // to match the browser's numberformatter defaults\n        var _fixed = this.floor ? Math.floor(i) : roundTo(i, 3);\n        return padStart(_fixed, this.padTo);\n      }\n    }\n  }]);\n  return PolyNumberFormatter;\n}();\n/**\n * @private\n */\nvar PolyDateFormatter = /*#__PURE__*/function () {\n  function PolyDateFormatter(dt, intl, opts) {\n    _classCallCheck(this, PolyDateFormatter);\n    this.opts = opts;\n    var z;\n    if (dt.zone.isUniversal) {\n      // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.\n      // That is why fixed-offset TZ is set to that unless it is:\n      // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.\n      // 2. Unsupported by the browser:\n      //    - some do not support Etc/\n      //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata\n      var gmtOffset = -1 * (dt.offset / 60);\n      var offsetZ = gmtOffset >= 0 ? \"Etc/GMT+\".concat(gmtOffset) : \"Etc/GMT\".concat(gmtOffset);\n      if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {\n        z = offsetZ;\n        this.dt = dt;\n      } else {\n        // Not all fixed-offset zones like Etc/+4:30 are present in tzdata.\n        // So we have to make do. Two cases:\n        // 1. The format options tell us to show the zone. We can't do that, so the best\n        // we can do is format the date in UTC.\n        // 2. The format options don't tell us to show the zone. Then we can adjust them\n        // the time and tell the formatter to show it to us in UTC, so that the time is right\n        // and the bad zone doesn't show up.\n        z = \"UTC\";\n        if (opts.timeZoneName) {\n          this.dt = dt;\n        } else {\n          this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);\n        }\n      }\n    } else if (dt.zone.type === \"system\") {\n      this.dt = dt;\n    } else {\n      this.dt = dt;\n      z = dt.zone.name;\n    }\n    var intlOpts = _objectSpread({}, this.opts);\n    if (z) {\n      intlOpts.timeZone = z;\n    }\n    this.dtf = getCachedDTF(intl, intlOpts);\n  }\n  _createClass(PolyDateFormatter, [{\n    key: \"format\",\n    value: function format() {\n      return this.dtf.format(this.dt.toJSDate());\n    }\n  }, {\n    key: \"formatToParts\",\n    value: function formatToParts() {\n      return this.dtf.formatToParts(this.dt.toJSDate());\n    }\n  }, {\n    key: \"resolvedOptions\",\n    value: function resolvedOptions() {\n      return this.dtf.resolvedOptions();\n    }\n  }]);\n  return PolyDateFormatter;\n}();\n/**\n * @private\n */\nvar PolyRelFormatter = /*#__PURE__*/function () {\n  function PolyRelFormatter(intl, isEnglish, opts) {\n    _classCallCheck(this, PolyRelFormatter);\n    this.opts = _objectSpread({\n      style: \"long\"\n    }, opts);\n    if (!isEnglish && hasRelative()) {\n      this.rtf = getCachedRTF(intl, opts);\n    }\n  }\n  _createClass(PolyRelFormatter, [{\n    key: \"format\",\n    value: function format(count, unit) {\n      if (this.rtf) {\n        return this.rtf.format(count, unit);\n      } else {\n        return English.formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== \"long\");\n      }\n    }\n  }, {\n    key: \"formatToParts\",\n    value: function formatToParts(count, unit) {\n      if (this.rtf) {\n        return this.rtf.formatToParts(count, unit);\n      } else {\n        return [];\n      }\n    }\n  }]);\n  return PolyRelFormatter;\n}();\n/**\n * @private\n */\nvar Locale = /*#__PURE__*/function () {\n  function Locale(locale, numbering, outputCalendar, specifiedLocale) {\n    _classCallCheck(this, Locale);\n    var _parseLocaleString = parseLocaleString(locale),\n      _parseLocaleString2 = _slicedToArray(_parseLocaleString, 3),\n      parsedLocale = _parseLocaleString2[0],\n      parsedNumberingSystem = _parseLocaleString2[1],\n      parsedOutputCalendar = _parseLocaleString2[2];\n    this.locale = parsedLocale;\n    this.numberingSystem = numbering || parsedNumberingSystem || null;\n    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;\n    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\n    this.weekdaysCache = {\n      format: {},\n      standalone: {}\n    };\n    this.monthsCache = {\n      format: {},\n      standalone: {}\n    };\n    this.meridiemCache = null;\n    this.eraCache = {};\n    this.specifiedLocale = specifiedLocale;\n    this.fastNumbersCached = null;\n  }\n  _createClass(Locale, [{\n    key: \"fastNumbers\",\n    get: function get() {\n      if (this.fastNumbersCached == null) {\n        this.fastNumbersCached = supportsFastNumbers(this);\n      }\n      return this.fastNumbersCached;\n    }\n  }, {\n    key: \"listingMode\",\n    value: function listingMode() {\n      var isActuallyEn = this.isEnglish();\n      var hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === \"latn\") && (this.outputCalendar === null || this.outputCalendar === \"gregory\");\n      return isActuallyEn && hasNoWeirdness ? \"en\" : \"intl\";\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(alts) {\n      if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n        return this;\n      } else {\n        return Locale.create(alts.locale || this.specifiedLocale, alts.numberingSystem || this.numberingSystem, alts.outputCalendar || this.outputCalendar, alts.defaultToEN || false);\n      }\n    }\n  }, {\n    key: \"redefaultToEN\",\n    value: function redefaultToEN() {\n      var alts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.clone(_objectSpread(_objectSpread({}, alts), {}, {\n        defaultToEN: true\n      }));\n    }\n  }, {\n    key: \"redefaultToSystem\",\n    value: function redefaultToSystem() {\n      var alts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.clone(_objectSpread(_objectSpread({}, alts), {}, {\n        defaultToEN: false\n      }));\n    }\n  }, {\n    key: \"months\",\n    value: function months(length) {\n      var _this = this;\n      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var defaultOK = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return listStuff(this, length, defaultOK, English.months, function () {\n        var intl = format ? {\n            month: length,\n            day: \"numeric\"\n          } : {\n            month: length\n          },\n          formatStr = format ? \"format\" : \"standalone\";\n        if (!_this.monthsCache[formatStr][length]) {\n          _this.monthsCache[formatStr][length] = mapMonths(function (dt) {\n            return _this.extract(dt, intl, \"month\");\n          });\n        }\n        return _this.monthsCache[formatStr][length];\n      });\n    }\n  }, {\n    key: \"weekdays\",\n    value: function weekdays(length) {\n      var _this2 = this;\n      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var defaultOK = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return listStuff(this, length, defaultOK, English.weekdays, function () {\n        var intl = format ? {\n            weekday: length,\n            year: \"numeric\",\n            month: \"long\",\n            day: \"numeric\"\n          } : {\n            weekday: length\n          },\n          formatStr = format ? \"format\" : \"standalone\";\n        if (!_this2.weekdaysCache[formatStr][length]) {\n          _this2.weekdaysCache[formatStr][length] = mapWeekdays(function (dt) {\n            return _this2.extract(dt, intl, \"weekday\");\n          });\n        }\n        return _this2.weekdaysCache[formatStr][length];\n      });\n    }\n  }, {\n    key: \"meridiems\",\n    value: function meridiems() {\n      var _this3 = this;\n      var defaultOK = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      return listStuff(this, undefined, defaultOK, function () {\n        return English.meridiems;\n      }, function () {\n        // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n        // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n        if (!_this3.meridiemCache) {\n          var intl = {\n            hour: \"numeric\",\n            hourCycle: \"h12\"\n          };\n          _this3.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(function (dt) {\n            return _this3.extract(dt, intl, \"dayperiod\");\n          });\n        }\n        return _this3.meridiemCache;\n      });\n    }\n  }, {\n    key: \"eras\",\n    value: function eras(length) {\n      var _this4 = this;\n      var defaultOK = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return listStuff(this, length, defaultOK, English.eras, function () {\n        var intl = {\n          era: length\n        };\n\n        // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n        // to definitely enumerate them.\n        if (!_this4.eraCache[length]) {\n          _this4.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(function (dt) {\n            return _this4.extract(dt, intl, \"era\");\n          });\n        }\n        return _this4.eraCache[length];\n      });\n    }\n  }, {\n    key: \"extract\",\n    value: function extract(dt, intlOpts, field) {\n      var df = this.dtFormatter(dt, intlOpts),\n        results = df.formatToParts(),\n        matching = results.find(function (m) {\n          return m.type.toLowerCase() === field;\n        });\n      return matching ? matching.value : null;\n    }\n  }, {\n    key: \"numberFormatter\",\n    value: function numberFormatter() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)\n      // (in contrast, the rest of the condition is used heavily)\n      return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);\n    }\n  }, {\n    key: \"dtFormatter\",\n    value: function dtFormatter(dt) {\n      var intlOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new PolyDateFormatter(dt, this.intl, intlOpts);\n    }\n  }, {\n    key: \"relFormatter\",\n    value: function relFormatter() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new PolyRelFormatter(this.intl, this.isEnglish(), opts);\n    }\n  }, {\n    key: \"listFormatter\",\n    value: function listFormatter() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return getCachedLF(this.intl, opts);\n    }\n  }, {\n    key: \"isEnglish\",\n    value: function isEnglish() {\n      return this.locale === \"en\" || this.locale.toLowerCase() === \"en-us\" || new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith(\"en-us\");\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;\n    }\n  }], [{\n    key: \"fromOpts\",\n    value: function fromOpts(opts) {\n      return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);\n    }\n  }, {\n    key: \"create\",\n    value: function create(locale, numberingSystem, outputCalendar) {\n      var defaultToEN = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var specifiedLocale = locale || Settings.defaultLocale;\n      // the system locale is useful for human readable strings but annoying for parsing/formatting known formats\n      var localeR = specifiedLocale || (defaultToEN ? \"en-US\" : systemLocale());\n      var numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;\n      var outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;\n      return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);\n    }\n  }, {\n    key: \"resetCache\",\n    value: function resetCache() {\n      sysLocaleCache = null;\n      intlDTCache = {};\n      intlNumCache = {};\n      intlRelCache = {};\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        locale = _ref.locale,\n        numberingSystem = _ref.numberingSystem,\n        outputCalendar = _ref.outputCalendar;\n      return Locale.create(locale, numberingSystem, outputCalendar);\n    }\n  }]);\n  return Locale;\n}();\nexport { Locale as default };","map":{"version":3,"names":["padStart","roundTo","hasRelative","English","Settings","DateTime","IANAZone","intlLFCache","getCachedLF","locString","opts","key","JSON","stringify","dtf","Intl","ListFormat","intlDTCache","getCachedDTF","DateTimeFormat","intlNumCache","getCachedINF","inf","NumberFormat","intlRelCache","getCachedRTF","base","cacheKeyOpts","RelativeTimeFormat","sysLocaleCache","systemLocale","resolvedOptions","locale","parseLocaleString","localeStr","uIndex","indexOf","options","smaller","substring","e","numberingSystem","calendar","intlConfigString","outputCalendar","mapMonths","f","ms","i","dt","utc","push","mapWeekdays","listStuff","loc","length","defaultOK","englishFn","intlFn","mode","listingMode","supportsFastNumbers","startsWith","intl","PolyNumberFormatter","forceSimple","padTo","floor","otherOpts","Object","keys","intlOpts","useGrouping","minimumIntegerDigits","fixed","Math","format","PolyDateFormatter","z","zone","isUniversal","gmtOffset","offset","offsetZ","create","valid","timeZoneName","fromMillis","ts","type","name","timeZone","toJSDate","formatToParts","PolyRelFormatter","isEnglish","style","rtf","count","unit","formatRelativeTime","numeric","Locale","numbering","specifiedLocale","parsedLocale","parsedNumberingSystem","parsedOutputCalendar","weekdaysCache","standalone","monthsCache","meridiemCache","eraCache","fastNumbersCached","isActuallyEn","hasNoWeirdness","alts","getOwnPropertyNames","defaultToEN","clone","months","month","day","formatStr","extract","weekdays","weekday","year","undefined","meridiems","hour","hourCycle","map","eras","era","field","df","dtFormatter","results","matching","find","m","toLowerCase","value","fastNumbers","other","defaultLocale","localeR","numberingSystemR","defaultNumberingSystem","outputCalendarR","defaultOutputCalendar"],"sources":["/workspace/aws-bootcamp-cruddur-2023/frontend-react-js/node_modules/luxon/src/impl/locale.js"],"sourcesContent":["import { padStart, roundTo, hasRelative } from \"./util.js\";\nimport * as English from \"./english.js\";\nimport Settings from \"../settings.js\";\nimport DateTime from \"../datetime.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\n\n// todo - remap caching\n\nlet intlLFCache = {};\nfunction getCachedLF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlLFCache[key];\n  if (!dtf) {\n    dtf = new Intl.ListFormat(locString, opts);\n    intlLFCache[key] = dtf;\n  }\n  return dtf;\n}\n\nlet intlDTCache = {};\nfunction getCachedDTF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlDTCache[key];\n  if (!dtf) {\n    dtf = new Intl.DateTimeFormat(locString, opts);\n    intlDTCache[key] = dtf;\n  }\n  return dtf;\n}\n\nlet intlNumCache = {};\nfunction getCachedINF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let inf = intlNumCache[key];\n  if (!inf) {\n    inf = new Intl.NumberFormat(locString, opts);\n    intlNumCache[key] = inf;\n  }\n  return inf;\n}\n\nlet intlRelCache = {};\nfunction getCachedRTF(locString, opts = {}) {\n  const { base, ...cacheKeyOpts } = opts; // exclude `base` from the options\n  const key = JSON.stringify([locString, cacheKeyOpts]);\n  let inf = intlRelCache[key];\n  if (!inf) {\n    inf = new Intl.RelativeTimeFormat(locString, opts);\n    intlRelCache[key] = inf;\n  }\n  return inf;\n}\n\nlet sysLocaleCache = null;\nfunction systemLocale() {\n  if (sysLocaleCache) {\n    return sysLocaleCache;\n  } else {\n    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;\n    return sysLocaleCache;\n  }\n}\n\nfunction parseLocaleString(localeStr) {\n  // I really want to avoid writing a BCP 47 parser\n  // see, e.g. https://github.com/wooorm/bcp-47\n  // Instead, we'll do this:\n\n  // a) if the string has no -u extensions, just leave it alone\n  // b) if it does, use Intl to resolve everything\n  // c) if Intl fails, try again without the -u\n\n  const uIndex = localeStr.indexOf(\"-u-\");\n  if (uIndex === -1) {\n    return [localeStr];\n  } else {\n    let options;\n    const smaller = localeStr.substring(0, uIndex);\n    try {\n      options = getCachedDTF(localeStr).resolvedOptions();\n    } catch (e) {\n      options = getCachedDTF(smaller).resolvedOptions();\n    }\n\n    const { numberingSystem, calendar } = options;\n    // return the smaller one so that we can append the calendar and numbering overrides to it\n    return [smaller, numberingSystem, calendar];\n  }\n}\n\nfunction intlConfigString(localeStr, numberingSystem, outputCalendar) {\n  if (outputCalendar || numberingSystem) {\n    localeStr += \"-u\";\n\n    if (outputCalendar) {\n      localeStr += `-ca-${outputCalendar}`;\n    }\n\n    if (numberingSystem) {\n      localeStr += `-nu-${numberingSystem}`;\n    }\n    return localeStr;\n  } else {\n    return localeStr;\n  }\n}\n\nfunction mapMonths(f) {\n  const ms = [];\n  for (let i = 1; i <= 12; i++) {\n    const dt = DateTime.utc(2016, i, 1);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction mapWeekdays(f) {\n  const ms = [];\n  for (let i = 1; i <= 7; i++) {\n    const dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction listStuff(loc, length, defaultOK, englishFn, intlFn) {\n  const mode = loc.listingMode(defaultOK);\n\n  if (mode === \"error\") {\n    return null;\n  } else if (mode === \"en\") {\n    return englishFn(length);\n  } else {\n    return intlFn(length);\n  }\n}\n\nfunction supportsFastNumbers(loc) {\n  if (loc.numberingSystem && loc.numberingSystem !== \"latn\") {\n    return false;\n  } else {\n    return (\n      loc.numberingSystem === \"latn\" ||\n      !loc.locale ||\n      loc.locale.startsWith(\"en\") ||\n      new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === \"latn\"\n    );\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyNumberFormatter {\n  constructor(intl, forceSimple, opts) {\n    this.padTo = opts.padTo || 0;\n    this.floor = opts.floor || false;\n\n    const { padTo, floor, ...otherOpts } = opts;\n\n    if (!forceSimple || Object.keys(otherOpts).length > 0) {\n      const intlOpts = { useGrouping: false, ...opts };\n      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;\n      this.inf = getCachedINF(intl, intlOpts);\n    }\n  }\n\n  format(i) {\n    if (this.inf) {\n      const fixed = this.floor ? Math.floor(i) : i;\n      return this.inf.format(fixed);\n    } else {\n      // to match the browser's numberformatter defaults\n      const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);\n      return padStart(fixed, this.padTo);\n    }\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyDateFormatter {\n  constructor(dt, intl, opts) {\n    this.opts = opts;\n\n    let z;\n    if (dt.zone.isUniversal) {\n      // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.\n      // That is why fixed-offset TZ is set to that unless it is:\n      // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.\n      // 2. Unsupported by the browser:\n      //    - some do not support Etc/\n      //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata\n      const gmtOffset = -1 * (dt.offset / 60);\n      const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;\n      if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {\n        z = offsetZ;\n        this.dt = dt;\n      } else {\n        // Not all fixed-offset zones like Etc/+4:30 are present in tzdata.\n        // So we have to make do. Two cases:\n        // 1. The format options tell us to show the zone. We can't do that, so the best\n        // we can do is format the date in UTC.\n        // 2. The format options don't tell us to show the zone. Then we can adjust them\n        // the time and tell the formatter to show it to us in UTC, so that the time is right\n        // and the bad zone doesn't show up.\n        z = \"UTC\";\n        if (opts.timeZoneName) {\n          this.dt = dt;\n        } else {\n          this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);\n        }\n      }\n    } else if (dt.zone.type === \"system\") {\n      this.dt = dt;\n    } else {\n      this.dt = dt;\n      z = dt.zone.name;\n    }\n\n    const intlOpts = { ...this.opts };\n    if (z) {\n      intlOpts.timeZone = z;\n    }\n    this.dtf = getCachedDTF(intl, intlOpts);\n  }\n\n  format() {\n    return this.dtf.format(this.dt.toJSDate());\n  }\n\n  formatToParts() {\n    return this.dtf.formatToParts(this.dt.toJSDate());\n  }\n\n  resolvedOptions() {\n    return this.dtf.resolvedOptions();\n  }\n}\n\n/**\n * @private\n */\nclass PolyRelFormatter {\n  constructor(intl, isEnglish, opts) {\n    this.opts = { style: \"long\", ...opts };\n    if (!isEnglish && hasRelative()) {\n      this.rtf = getCachedRTF(intl, opts);\n    }\n  }\n\n  format(count, unit) {\n    if (this.rtf) {\n      return this.rtf.format(count, unit);\n    } else {\n      return English.formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== \"long\");\n    }\n  }\n\n  formatToParts(count, unit) {\n    if (this.rtf) {\n      return this.rtf.formatToParts(count, unit);\n    } else {\n      return [];\n    }\n  }\n}\n\n/**\n * @private\n */\n\nexport default class Locale {\n  static fromOpts(opts) {\n    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);\n  }\n\n  static create(locale, numberingSystem, outputCalendar, defaultToEN = false) {\n    const specifiedLocale = locale || Settings.defaultLocale;\n    // the system locale is useful for human readable strings but annoying for parsing/formatting known formats\n    const localeR = specifiedLocale || (defaultToEN ? \"en-US\" : systemLocale());\n    const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;\n    const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;\n    return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);\n  }\n\n  static resetCache() {\n    sysLocaleCache = null;\n    intlDTCache = {};\n    intlNumCache = {};\n    intlRelCache = {};\n  }\n\n  static fromObject({ locale, numberingSystem, outputCalendar } = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar);\n  }\n\n  constructor(locale, numbering, outputCalendar, specifiedLocale) {\n    const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);\n\n    this.locale = parsedLocale;\n    this.numberingSystem = numbering || parsedNumberingSystem || null;\n    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;\n    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\n\n    this.weekdaysCache = { format: {}, standalone: {} };\n    this.monthsCache = { format: {}, standalone: {} };\n    this.meridiemCache = null;\n    this.eraCache = {};\n\n    this.specifiedLocale = specifiedLocale;\n    this.fastNumbersCached = null;\n  }\n\n  get fastNumbers() {\n    if (this.fastNumbersCached == null) {\n      this.fastNumbersCached = supportsFastNumbers(this);\n    }\n\n    return this.fastNumbersCached;\n  }\n\n  listingMode() {\n    const isActuallyEn = this.isEnglish();\n    const hasNoWeirdness =\n      (this.numberingSystem === null || this.numberingSystem === \"latn\") &&\n      (this.outputCalendar === null || this.outputCalendar === \"gregory\");\n    return isActuallyEn && hasNoWeirdness ? \"en\" : \"intl\";\n  }\n\n  clone(alts) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    } else {\n      return Locale.create(\n        alts.locale || this.specifiedLocale,\n        alts.numberingSystem || this.numberingSystem,\n        alts.outputCalendar || this.outputCalendar,\n        alts.defaultToEN || false\n      );\n    }\n  }\n\n  redefaultToEN(alts = {}) {\n    return this.clone({ ...alts, defaultToEN: true });\n  }\n\n  redefaultToSystem(alts = {}) {\n    return this.clone({ ...alts, defaultToEN: false });\n  }\n\n  months(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.months, () => {\n      const intl = format ? { month: length, day: \"numeric\" } : { month: length },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.monthsCache[formatStr][length]) {\n        this.monthsCache[formatStr][length] = mapMonths((dt) => this.extract(dt, intl, \"month\"));\n      }\n      return this.monthsCache[formatStr][length];\n    });\n  }\n\n  weekdays(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.weekdays, () => {\n      const intl = format\n          ? { weekday: length, year: \"numeric\", month: \"long\", day: \"numeric\" }\n          : { weekday: length },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.weekdaysCache[formatStr][length]) {\n        this.weekdaysCache[formatStr][length] = mapWeekdays((dt) =>\n          this.extract(dt, intl, \"weekday\")\n        );\n      }\n      return this.weekdaysCache[formatStr][length];\n    });\n  }\n\n  meridiems(defaultOK = true) {\n    return listStuff(\n      this,\n      undefined,\n      defaultOK,\n      () => English.meridiems,\n      () => {\n        // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n        // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n        if (!this.meridiemCache) {\n          const intl = { hour: \"numeric\", hourCycle: \"h12\" };\n          this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(\n            (dt) => this.extract(dt, intl, \"dayperiod\")\n          );\n        }\n\n        return this.meridiemCache;\n      }\n    );\n  }\n\n  eras(length, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.eras, () => {\n      const intl = { era: length };\n\n      // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n      // to definitely enumerate them.\n      if (!this.eraCache[length]) {\n        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map((dt) =>\n          this.extract(dt, intl, \"era\")\n        );\n      }\n\n      return this.eraCache[length];\n    });\n  }\n\n  extract(dt, intlOpts, field) {\n    const df = this.dtFormatter(dt, intlOpts),\n      results = df.formatToParts(),\n      matching = results.find((m) => m.type.toLowerCase() === field);\n    return matching ? matching.value : null;\n  }\n\n  numberFormatter(opts = {}) {\n    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)\n    // (in contrast, the rest of the condition is used heavily)\n    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);\n  }\n\n  dtFormatter(dt, intlOpts = {}) {\n    return new PolyDateFormatter(dt, this.intl, intlOpts);\n  }\n\n  relFormatter(opts = {}) {\n    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);\n  }\n\n  listFormatter(opts = {}) {\n    return getCachedLF(this.intl, opts);\n  }\n\n  isEnglish() {\n    return (\n      this.locale === \"en\" ||\n      this.locale.toLowerCase() === \"en-us\" ||\n      new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith(\"en-us\")\n    );\n  }\n\n  equals(other) {\n    return (\n      this.locale === other.locale &&\n      this.numberingSystem === other.numberingSystem &&\n      this.outputCalendar === other.outputCalendar\n    );\n  }\n}\n"],"mappings":";;;;;;;AAAA,SAASA,QAAQ,EAAEC,OAAO,EAAEC,WAAW,QAAQ,WAAW;AAC1D,OAAO,KAAKC,OAAO,MAAM,cAAc;AACvC,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,QAAQ,MAAM,sBAAsB;;AAE3C;;AAEA,IAAIC,WAAW,GAAG,CAAC,CAAC;AACpB,SAASC,WAAW,CAACC,SAAS,EAAa;EAAA,IAAXC,IAAI,uEAAG,CAAC,CAAC;EACvC,IAAMC,GAAG,GAAGC,IAAI,CAACC,SAAS,CAAC,CAACJ,SAAS,EAAEC,IAAI,CAAC,CAAC;EAC7C,IAAII,GAAG,GAAGP,WAAW,CAACI,GAAG,CAAC;EAC1B,IAAI,CAACG,GAAG,EAAE;IACRA,GAAG,GAAG,IAAIC,IAAI,CAACC,UAAU,CAACP,SAAS,EAAEC,IAAI,CAAC;IAC1CH,WAAW,CAACI,GAAG,CAAC,GAAGG,GAAG;EACxB;EACA,OAAOA,GAAG;AACZ;AAEA,IAAIG,WAAW,GAAG,CAAC,CAAC;AACpB,SAASC,YAAY,CAACT,SAAS,EAAa;EAAA,IAAXC,IAAI,uEAAG,CAAC,CAAC;EACxC,IAAMC,GAAG,GAAGC,IAAI,CAACC,SAAS,CAAC,CAACJ,SAAS,EAAEC,IAAI,CAAC,CAAC;EAC7C,IAAII,GAAG,GAAGG,WAAW,CAACN,GAAG,CAAC;EAC1B,IAAI,CAACG,GAAG,EAAE;IACRA,GAAG,GAAG,IAAIC,IAAI,CAACI,cAAc,CAACV,SAAS,EAAEC,IAAI,CAAC;IAC9CO,WAAW,CAACN,GAAG,CAAC,GAAGG,GAAG;EACxB;EACA,OAAOA,GAAG;AACZ;AAEA,IAAIM,YAAY,GAAG,CAAC,CAAC;AACrB,SAASC,YAAY,CAACZ,SAAS,EAAa;EAAA,IAAXC,IAAI,uEAAG,CAAC,CAAC;EACxC,IAAMC,GAAG,GAAGC,IAAI,CAACC,SAAS,CAAC,CAACJ,SAAS,EAAEC,IAAI,CAAC,CAAC;EAC7C,IAAIY,GAAG,GAAGF,YAAY,CAACT,GAAG,CAAC;EAC3B,IAAI,CAACW,GAAG,EAAE;IACRA,GAAG,GAAG,IAAIP,IAAI,CAACQ,YAAY,CAACd,SAAS,EAAEC,IAAI,CAAC;IAC5CU,YAAY,CAACT,GAAG,CAAC,GAAGW,GAAG;EACzB;EACA,OAAOA,GAAG;AACZ;AAEA,IAAIE,YAAY,GAAG,CAAC,CAAC;AACrB,SAASC,YAAY,CAAChB,SAAS,EAAa;EAAA,IAAXC,IAAI,uEAAG,CAAC,CAAC;EACxC,IAAQgB,IAAI,GAAsBhB,IAAI,CAA9BgB,IAAI;IAAKC,YAAY,4BAAKjB,IAAI,aAAC,CAAC;EACxC,IAAMC,GAAG,GAAGC,IAAI,CAACC,SAAS,CAAC,CAACJ,SAAS,EAAEkB,YAAY,CAAC,CAAC;EACrD,IAAIL,GAAG,GAAGE,YAAY,CAACb,GAAG,CAAC;EAC3B,IAAI,CAACW,GAAG,EAAE;IACRA,GAAG,GAAG,IAAIP,IAAI,CAACa,kBAAkB,CAACnB,SAAS,EAAEC,IAAI,CAAC;IAClDc,YAAY,CAACb,GAAG,CAAC,GAAGW,GAAG;EACzB;EACA,OAAOA,GAAG;AACZ;AAEA,IAAIO,cAAc,GAAG,IAAI;AACzB,SAASC,YAAY,GAAG;EACtB,IAAID,cAAc,EAAE;IAClB,OAAOA,cAAc;EACvB,CAAC,MAAM;IACLA,cAAc,GAAG,IAAId,IAAI,CAACI,cAAc,EAAE,CAACY,eAAe,EAAE,CAACC,MAAM;IACnE,OAAOH,cAAc;EACvB;AACF;AAEA,SAASI,iBAAiB,CAACC,SAAS,EAAE;EACpC;EACA;EACA;;EAEA;EACA;EACA;;EAEA,IAAMC,MAAM,GAAGD,SAAS,CAACE,OAAO,CAAC,KAAK,CAAC;EACvC,IAAID,MAAM,KAAK,CAAC,CAAC,EAAE;IACjB,OAAO,CAACD,SAAS,CAAC;EACpB,CAAC,MAAM;IACL,IAAIG,OAAO;IACX,IAAMC,OAAO,GAAGJ,SAAS,CAACK,SAAS,CAAC,CAAC,EAAEJ,MAAM,CAAC;IAC9C,IAAI;MACFE,OAAO,GAAGnB,YAAY,CAACgB,SAAS,CAAC,CAACH,eAAe,EAAE;IACrD,CAAC,CAAC,OAAOS,CAAC,EAAE;MACVH,OAAO,GAAGnB,YAAY,CAACoB,OAAO,CAAC,CAACP,eAAe,EAAE;IACnD;IAEA,eAAsCM,OAAO;MAArCI,eAAe,YAAfA,eAAe;MAAEC,QAAQ,YAARA,QAAQ;IACjC;IACA,OAAO,CAACJ,OAAO,EAAEG,eAAe,EAAEC,QAAQ,CAAC;EAC7C;AACF;AAEA,SAASC,gBAAgB,CAACT,SAAS,EAAEO,eAAe,EAAEG,cAAc,EAAE;EACpE,IAAIA,cAAc,IAAIH,eAAe,EAAE;IACrCP,SAAS,IAAI,IAAI;IAEjB,IAAIU,cAAc,EAAE;MAClBV,SAAS,kBAAWU,cAAc,CAAE;IACtC;IAEA,IAAIH,eAAe,EAAE;MACnBP,SAAS,kBAAWO,eAAe,CAAE;IACvC;IACA,OAAOP,SAAS;EAClB,CAAC,MAAM;IACL,OAAOA,SAAS;EAClB;AACF;AAEA,SAASW,SAAS,CAACC,CAAC,EAAE;EACpB,IAAMC,EAAE,GAAG,EAAE;EACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;IAC5B,IAAMC,EAAE,GAAG5C,QAAQ,CAAC6C,GAAG,CAAC,IAAI,EAAEF,CAAC,EAAE,CAAC,CAAC;IACnCD,EAAE,CAACI,IAAI,CAACL,CAAC,CAACG,EAAE,CAAC,CAAC;EAChB;EACA,OAAOF,EAAE;AACX;AAEA,SAASK,WAAW,CAACN,CAAC,EAAE;EACtB,IAAMC,EAAE,GAAG,EAAE;EACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC3B,IAAMC,EAAE,GAAG5C,QAAQ,CAAC6C,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,GAAGF,CAAC,CAAC;IACzCD,EAAE,CAACI,IAAI,CAACL,CAAC,CAACG,EAAE,CAAC,CAAC;EAChB;EACA,OAAOF,EAAE;AACX;AAEA,SAASM,SAAS,CAACC,GAAG,EAAEC,MAAM,EAAEC,SAAS,EAAEC,SAAS,EAAEC,MAAM,EAAE;EAC5D,IAAMC,IAAI,GAAGL,GAAG,CAACM,WAAW,CAACJ,SAAS,CAAC;EAEvC,IAAIG,IAAI,KAAK,OAAO,EAAE;IACpB,OAAO,IAAI;EACb,CAAC,MAAM,IAAIA,IAAI,KAAK,IAAI,EAAE;IACxB,OAAOF,SAAS,CAACF,MAAM,CAAC;EAC1B,CAAC,MAAM;IACL,OAAOG,MAAM,CAACH,MAAM,CAAC;EACvB;AACF;AAEA,SAASM,mBAAmB,CAACP,GAAG,EAAE;EAChC,IAAIA,GAAG,CAACb,eAAe,IAAIa,GAAG,CAACb,eAAe,KAAK,MAAM,EAAE;IACzD,OAAO,KAAK;EACd,CAAC,MAAM;IACL,OACEa,GAAG,CAACb,eAAe,KAAK,MAAM,IAC9B,CAACa,GAAG,CAACtB,MAAM,IACXsB,GAAG,CAACtB,MAAM,CAAC8B,UAAU,CAAC,IAAI,CAAC,IAC3B,IAAI/C,IAAI,CAACI,cAAc,CAACmC,GAAG,CAACS,IAAI,CAAC,CAAChC,eAAe,EAAE,CAACU,eAAe,KAAK,MAAM;EAElF;AACF;;AAEA;AACA;AACA;AAFA,IAIMuB,mBAAmB;EACvB,6BAAYD,IAAI,EAAEE,WAAW,EAAEvD,IAAI,EAAE;IAAA;IACnC,IAAI,CAACwD,KAAK,GAAGxD,IAAI,CAACwD,KAAK,IAAI,CAAC;IAC5B,IAAI,CAACC,KAAK,GAAGzD,IAAI,CAACyD,KAAK,IAAI,KAAK;IAEhC,IAAQD,KAAK,GAA0BxD,IAAI,CAAnCwD,KAAK;MAAEC,KAAK,GAAmBzD,IAAI,CAA5ByD,KAAK;MAAKC,SAAS,4BAAK1D,IAAI;IAE3C,IAAI,CAACuD,WAAW,IAAII,MAAM,CAACC,IAAI,CAACF,SAAS,CAAC,CAACb,MAAM,GAAG,CAAC,EAAE;MACrD,IAAMgB,QAAQ;QAAKC,WAAW,EAAE;MAAK,GAAK9D,IAAI,CAAE;MAChD,IAAIA,IAAI,CAACwD,KAAK,GAAG,CAAC,EAAEK,QAAQ,CAACE,oBAAoB,GAAG/D,IAAI,CAACwD,KAAK;MAC9D,IAAI,CAAC5C,GAAG,GAAGD,YAAY,CAAC0C,IAAI,EAAEQ,QAAQ,CAAC;IACzC;EACF;EAAC;IAAA;IAAA,OAED,gBAAOvB,CAAC,EAAE;MACR,IAAI,IAAI,CAAC1B,GAAG,EAAE;QACZ,IAAMoD,KAAK,GAAG,IAAI,CAACP,KAAK,GAAGQ,IAAI,CAACR,KAAK,CAACnB,CAAC,CAAC,GAAGA,CAAC;QAC5C,OAAO,IAAI,CAAC1B,GAAG,CAACsD,MAAM,CAACF,KAAK,CAAC;MAC/B,CAAC,MAAM;QACL;QACA,IAAMA,MAAK,GAAG,IAAI,CAACP,KAAK,GAAGQ,IAAI,CAACR,KAAK,CAACnB,CAAC,CAAC,GAAG/C,OAAO,CAAC+C,CAAC,EAAE,CAAC,CAAC;QACxD,OAAOhD,QAAQ,CAAC0E,MAAK,EAAE,IAAI,CAACR,KAAK,CAAC;MACpC;IACF;EAAC;EAAA;AAAA;AAGH;AACA;AACA;AAFA,IAIMW,iBAAiB;EACrB,2BAAY5B,EAAE,EAAEc,IAAI,EAAErD,IAAI,EAAE;IAAA;IAC1B,IAAI,CAACA,IAAI,GAAGA,IAAI;IAEhB,IAAIoE,CAAC;IACL,IAAI7B,EAAE,CAAC8B,IAAI,CAACC,WAAW,EAAE;MACvB;MACA;MACA;MACA;MACA;MACA;MACA,IAAMC,SAAS,GAAG,CAAC,CAAC,IAAIhC,EAAE,CAACiC,MAAM,GAAG,EAAE,CAAC;MACvC,IAAMC,OAAO,GAAGF,SAAS,IAAI,CAAC,qBAAcA,SAAS,qBAAeA,SAAS,CAAE;MAC/E,IAAIhC,EAAE,CAACiC,MAAM,KAAK,CAAC,IAAI5E,QAAQ,CAAC8E,MAAM,CAACD,OAAO,CAAC,CAACE,KAAK,EAAE;QACrDP,CAAC,GAAGK,OAAO;QACX,IAAI,CAAClC,EAAE,GAAGA,EAAE;MACd,CAAC,MAAM;QACL;QACA;QACA;QACA;QACA;QACA;QACA;QACA6B,CAAC,GAAG,KAAK;QACT,IAAIpE,IAAI,CAAC4E,YAAY,EAAE;UACrB,IAAI,CAACrC,EAAE,GAAGA,EAAE;QACd,CAAC,MAAM;UACL,IAAI,CAACA,EAAE,GAAGA,EAAE,CAACiC,MAAM,KAAK,CAAC,GAAGjC,EAAE,GAAG5C,QAAQ,CAACkF,UAAU,CAACtC,EAAE,CAACuC,EAAE,GAAGvC,EAAE,CAACiC,MAAM,GAAG,EAAE,GAAG,IAAI,CAAC;QACrF;MACF;IACF,CAAC,MAAM,IAAIjC,EAAE,CAAC8B,IAAI,CAACU,IAAI,KAAK,QAAQ,EAAE;MACpC,IAAI,CAACxC,EAAE,GAAGA,EAAE;IACd,CAAC,MAAM;MACL,IAAI,CAACA,EAAE,GAAGA,EAAE;MACZ6B,CAAC,GAAG7B,EAAE,CAAC8B,IAAI,CAACW,IAAI;IAClB;IAEA,IAAMnB,QAAQ,qBAAQ,IAAI,CAAC7D,IAAI,CAAE;IACjC,IAAIoE,CAAC,EAAE;MACLP,QAAQ,CAACoB,QAAQ,GAAGb,CAAC;IACvB;IACA,IAAI,CAAChE,GAAG,GAAGI,YAAY,CAAC6C,IAAI,EAAEQ,QAAQ,CAAC;EACzC;EAAC;IAAA;IAAA,OAED,kBAAS;MACP,OAAO,IAAI,CAACzD,GAAG,CAAC8D,MAAM,CAAC,IAAI,CAAC3B,EAAE,CAAC2C,QAAQ,EAAE,CAAC;IAC5C;EAAC;IAAA;IAAA,OAED,yBAAgB;MACd,OAAO,IAAI,CAAC9E,GAAG,CAAC+E,aAAa,CAAC,IAAI,CAAC5C,EAAE,CAAC2C,QAAQ,EAAE,CAAC;IACnD;EAAC;IAAA;IAAA,OAED,2BAAkB;MAChB,OAAO,IAAI,CAAC9E,GAAG,CAACiB,eAAe,EAAE;IACnC;EAAC;EAAA;AAAA;AAGH;AACA;AACA;AAFA,IAGM+D,gBAAgB;EACpB,0BAAY/B,IAAI,EAAEgC,SAAS,EAAErF,IAAI,EAAE;IAAA;IACjC,IAAI,CAACA,IAAI;MAAKsF,KAAK,EAAE;IAAM,GAAKtF,IAAI,CAAE;IACtC,IAAI,CAACqF,SAAS,IAAI7F,WAAW,EAAE,EAAE;MAC/B,IAAI,CAAC+F,GAAG,GAAGxE,YAAY,CAACsC,IAAI,EAAErD,IAAI,CAAC;IACrC;EACF;EAAC;IAAA;IAAA,OAED,gBAAOwF,KAAK,EAAEC,IAAI,EAAE;MAClB,IAAI,IAAI,CAACF,GAAG,EAAE;QACZ,OAAO,IAAI,CAACA,GAAG,CAACrB,MAAM,CAACsB,KAAK,EAAEC,IAAI,CAAC;MACrC,CAAC,MAAM;QACL,OAAOhG,OAAO,CAACiG,kBAAkB,CAACD,IAAI,EAAED,KAAK,EAAE,IAAI,CAACxF,IAAI,CAAC2F,OAAO,EAAE,IAAI,CAAC3F,IAAI,CAACsF,KAAK,KAAK,MAAM,CAAC;MAC/F;IACF;EAAC;IAAA;IAAA,OAED,uBAAcE,KAAK,EAAEC,IAAI,EAAE;MACzB,IAAI,IAAI,CAACF,GAAG,EAAE;QACZ,OAAO,IAAI,CAACA,GAAG,CAACJ,aAAa,CAACK,KAAK,EAAEC,IAAI,CAAC;MAC5C,CAAC,MAAM;QACL,OAAO,EAAE;MACX;IACF;EAAC;EAAA;AAAA;AAGH;AACA;AACA;AAFA,IAIqBG,MAAM;EAyBzB,gBAAYtE,MAAM,EAAEuE,SAAS,EAAE3D,cAAc,EAAE4D,eAAe,EAAE;IAAA;IAC9D,yBAAoEvE,iBAAiB,CAACD,MAAM,CAAC;MAAA;MAAtFyE,YAAY;MAAEC,qBAAqB;MAAEC,oBAAoB;IAEhE,IAAI,CAAC3E,MAAM,GAAGyE,YAAY;IAC1B,IAAI,CAAChE,eAAe,GAAG8D,SAAS,IAAIG,qBAAqB,IAAI,IAAI;IACjE,IAAI,CAAC9D,cAAc,GAAGA,cAAc,IAAI+D,oBAAoB,IAAI,IAAI;IACpE,IAAI,CAAC5C,IAAI,GAAGpB,gBAAgB,CAAC,IAAI,CAACX,MAAM,EAAE,IAAI,CAACS,eAAe,EAAE,IAAI,CAACG,cAAc,CAAC;IAEpF,IAAI,CAACgE,aAAa,GAAG;MAAEhC,MAAM,EAAE,CAAC,CAAC;MAAEiC,UAAU,EAAE,CAAC;IAAE,CAAC;IACnD,IAAI,CAACC,WAAW,GAAG;MAAElC,MAAM,EAAE,CAAC,CAAC;MAAEiC,UAAU,EAAE,CAAC;IAAE,CAAC;IACjD,IAAI,CAACE,aAAa,GAAG,IAAI;IACzB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;IAElB,IAAI,CAACR,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACS,iBAAiB,GAAG,IAAI;EAC/B;EAAC;IAAA;IAAA,KAED,eAAkB;MAChB,IAAI,IAAI,CAACA,iBAAiB,IAAI,IAAI,EAAE;QAClC,IAAI,CAACA,iBAAiB,GAAGpD,mBAAmB,CAAC,IAAI,CAAC;MACpD;MAEA,OAAO,IAAI,CAACoD,iBAAiB;IAC/B;EAAC;IAAA;IAAA,OAED,uBAAc;MACZ,IAAMC,YAAY,GAAG,IAAI,CAACnB,SAAS,EAAE;MACrC,IAAMoB,cAAc,GAClB,CAAC,IAAI,CAAC1E,eAAe,KAAK,IAAI,IAAI,IAAI,CAACA,eAAe,KAAK,MAAM,MAChE,IAAI,CAACG,cAAc,KAAK,IAAI,IAAI,IAAI,CAACA,cAAc,KAAK,SAAS,CAAC;MACrE,OAAOsE,YAAY,IAAIC,cAAc,GAAG,IAAI,GAAG,MAAM;IACvD;EAAC;IAAA;IAAA,OAED,eAAMC,IAAI,EAAE;MACV,IAAI,CAACA,IAAI,IAAI/C,MAAM,CAACgD,mBAAmB,CAACD,IAAI,CAAC,CAAC7D,MAAM,KAAK,CAAC,EAAE;QAC1D,OAAO,IAAI;MACb,CAAC,MAAM;QACL,OAAO+C,MAAM,CAAClB,MAAM,CAClBgC,IAAI,CAACpF,MAAM,IAAI,IAAI,CAACwE,eAAe,EACnCY,IAAI,CAAC3E,eAAe,IAAI,IAAI,CAACA,eAAe,EAC5C2E,IAAI,CAACxE,cAAc,IAAI,IAAI,CAACA,cAAc,EAC1CwE,IAAI,CAACE,WAAW,IAAI,KAAK,CAC1B;MACH;IACF;EAAC;IAAA;IAAA,OAED,yBAAyB;MAAA,IAAXF,IAAI,uEAAG,CAAC,CAAC;MACrB,OAAO,IAAI,CAACG,KAAK,iCAAMH,IAAI;QAAEE,WAAW,EAAE;MAAI,GAAG;IACnD;EAAC;IAAA;IAAA,OAED,6BAA6B;MAAA,IAAXF,IAAI,uEAAG,CAAC,CAAC;MACzB,OAAO,IAAI,CAACG,KAAK,iCAAMH,IAAI;QAAEE,WAAW,EAAE;MAAK,GAAG;IACpD;EAAC;IAAA;IAAA,OAED,gBAAO/D,MAAM,EAAoC;MAAA;MAAA,IAAlCqB,MAAM,uEAAG,KAAK;MAAA,IAAEpB,SAAS,uEAAG,IAAI;MAC7C,OAAOH,SAAS,CAAC,IAAI,EAAEE,MAAM,EAAEC,SAAS,EAAErD,OAAO,CAACqH,MAAM,EAAE,YAAM;QAC9D,IAAMzD,IAAI,GAAGa,MAAM,GAAG;YAAE6C,KAAK,EAAElE,MAAM;YAAEmE,GAAG,EAAE;UAAU,CAAC,GAAG;YAAED,KAAK,EAAElE;UAAO,CAAC;UACzEoE,SAAS,GAAG/C,MAAM,GAAG,QAAQ,GAAG,YAAY;QAC9C,IAAI,CAAC,KAAI,CAACkC,WAAW,CAACa,SAAS,CAAC,CAACpE,MAAM,CAAC,EAAE;UACxC,KAAI,CAACuD,WAAW,CAACa,SAAS,CAAC,CAACpE,MAAM,CAAC,GAAGV,SAAS,CAAC,UAACI,EAAE;YAAA,OAAK,KAAI,CAAC2E,OAAO,CAAC3E,EAAE,EAAEc,IAAI,EAAE,OAAO,CAAC;UAAA,EAAC;QAC1F;QACA,OAAO,KAAI,CAAC+C,WAAW,CAACa,SAAS,CAAC,CAACpE,MAAM,CAAC;MAC5C,CAAC,CAAC;IACJ;EAAC;IAAA;IAAA,OAED,kBAASA,MAAM,EAAoC;MAAA;MAAA,IAAlCqB,MAAM,uEAAG,KAAK;MAAA,IAAEpB,SAAS,uEAAG,IAAI;MAC/C,OAAOH,SAAS,CAAC,IAAI,EAAEE,MAAM,EAAEC,SAAS,EAAErD,OAAO,CAAC0H,QAAQ,EAAE,YAAM;QAChE,IAAM9D,IAAI,GAAGa,MAAM,GACb;YAAEkD,OAAO,EAAEvE,MAAM;YAAEwE,IAAI,EAAE,SAAS;YAAEN,KAAK,EAAE,MAAM;YAAEC,GAAG,EAAE;UAAU,CAAC,GACnE;YAAEI,OAAO,EAAEvE;UAAO,CAAC;UACvBoE,SAAS,GAAG/C,MAAM,GAAG,QAAQ,GAAG,YAAY;QAC9C,IAAI,CAAC,MAAI,CAACgC,aAAa,CAACe,SAAS,CAAC,CAACpE,MAAM,CAAC,EAAE;UAC1C,MAAI,CAACqD,aAAa,CAACe,SAAS,CAAC,CAACpE,MAAM,CAAC,GAAGH,WAAW,CAAC,UAACH,EAAE;YAAA,OACrD,MAAI,CAAC2E,OAAO,CAAC3E,EAAE,EAAEc,IAAI,EAAE,SAAS,CAAC;UAAA,EAClC;QACH;QACA,OAAO,MAAI,CAAC6C,aAAa,CAACe,SAAS,CAAC,CAACpE,MAAM,CAAC;MAC9C,CAAC,CAAC;IACJ;EAAC;IAAA;IAAA,OAED,qBAA4B;MAAA;MAAA,IAAlBC,SAAS,uEAAG,IAAI;MACxB,OAAOH,SAAS,CACd,IAAI,EACJ2E,SAAS,EACTxE,SAAS,EACT;QAAA,OAAMrD,OAAO,CAAC8H,SAAS;MAAA,GACvB,YAAM;QACJ;QACA;QACA,IAAI,CAAC,MAAI,CAAClB,aAAa,EAAE;UACvB,IAAMhD,IAAI,GAAG;YAAEmE,IAAI,EAAE,SAAS;YAAEC,SAAS,EAAE;UAAM,CAAC;UAClD,MAAI,CAACpB,aAAa,GAAG,CAAC1G,QAAQ,CAAC6C,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE7C,QAAQ,CAAC6C,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAACkF,GAAG,CACtF,UAACnF,EAAE;YAAA,OAAK,MAAI,CAAC2E,OAAO,CAAC3E,EAAE,EAAEc,IAAI,EAAE,WAAW,CAAC;UAAA,EAC5C;QACH;QAEA,OAAO,MAAI,CAACgD,aAAa;MAC3B,CAAC,CACF;IACH;EAAC;IAAA;IAAA,OAED,cAAKxD,MAAM,EAAoB;MAAA;MAAA,IAAlBC,SAAS,uEAAG,IAAI;MAC3B,OAAOH,SAAS,CAAC,IAAI,EAAEE,MAAM,EAAEC,SAAS,EAAErD,OAAO,CAACkI,IAAI,EAAE,YAAM;QAC5D,IAAMtE,IAAI,GAAG;UAAEuE,GAAG,EAAE/E;QAAO,CAAC;;QAE5B;QACA;QACA,IAAI,CAAC,MAAI,CAACyD,QAAQ,CAACzD,MAAM,CAAC,EAAE;UAC1B,MAAI,CAACyD,QAAQ,CAACzD,MAAM,CAAC,GAAG,CAAClD,QAAQ,CAAC6C,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE7C,QAAQ,CAAC6C,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAACkF,GAAG,CAAC,UAACnF,EAAE;YAAA,OACjF,MAAI,CAAC2E,OAAO,CAAC3E,EAAE,EAAEc,IAAI,EAAE,KAAK,CAAC;UAAA,EAC9B;QACH;QAEA,OAAO,MAAI,CAACiD,QAAQ,CAACzD,MAAM,CAAC;MAC9B,CAAC,CAAC;IACJ;EAAC;IAAA;IAAA,OAED,iBAAQN,EAAE,EAAEsB,QAAQ,EAAEgE,KAAK,EAAE;MAC3B,IAAMC,EAAE,GAAG,IAAI,CAACC,WAAW,CAACxF,EAAE,EAAEsB,QAAQ,CAAC;QACvCmE,OAAO,GAAGF,EAAE,CAAC3C,aAAa,EAAE;QAC5B8C,QAAQ,GAAGD,OAAO,CAACE,IAAI,CAAC,UAACC,CAAC;UAAA,OAAKA,CAAC,CAACpD,IAAI,CAACqD,WAAW,EAAE,KAAKP,KAAK;QAAA,EAAC;MAChE,OAAOI,QAAQ,GAAGA,QAAQ,CAACI,KAAK,GAAG,IAAI;IACzC;EAAC;IAAA;IAAA,OAED,2BAA2B;MAAA,IAAXrI,IAAI,uEAAG,CAAC,CAAC;MACvB;MACA;MACA,OAAO,IAAIsD,mBAAmB,CAAC,IAAI,CAACD,IAAI,EAAErD,IAAI,CAACuD,WAAW,IAAI,IAAI,CAAC+E,WAAW,EAAEtI,IAAI,CAAC;IACvF;EAAC;IAAA;IAAA,OAED,qBAAYuC,EAAE,EAAiB;MAAA,IAAfsB,QAAQ,uEAAG,CAAC,CAAC;MAC3B,OAAO,IAAIM,iBAAiB,CAAC5B,EAAE,EAAE,IAAI,CAACc,IAAI,EAAEQ,QAAQ,CAAC;IACvD;EAAC;IAAA;IAAA,OAED,wBAAwB;MAAA,IAAX7D,IAAI,uEAAG,CAAC,CAAC;MACpB,OAAO,IAAIoF,gBAAgB,CAAC,IAAI,CAAC/B,IAAI,EAAE,IAAI,CAACgC,SAAS,EAAE,EAAErF,IAAI,CAAC;IAChE;EAAC;IAAA;IAAA,OAED,yBAAyB;MAAA,IAAXA,IAAI,uEAAG,CAAC,CAAC;MACrB,OAAOF,WAAW,CAAC,IAAI,CAACuD,IAAI,EAAErD,IAAI,CAAC;IACrC;EAAC;IAAA;IAAA,OAED,qBAAY;MACV,OACE,IAAI,CAACsB,MAAM,KAAK,IAAI,IACpB,IAAI,CAACA,MAAM,CAAC8G,WAAW,EAAE,KAAK,OAAO,IACrC,IAAI/H,IAAI,CAACI,cAAc,CAAC,IAAI,CAAC4C,IAAI,CAAC,CAAChC,eAAe,EAAE,CAACC,MAAM,CAAC8B,UAAU,CAAC,OAAO,CAAC;IAEnF;EAAC;IAAA;IAAA,OAED,gBAAOmF,KAAK,EAAE;MACZ,OACE,IAAI,CAACjH,MAAM,KAAKiH,KAAK,CAACjH,MAAM,IAC5B,IAAI,CAACS,eAAe,KAAKwG,KAAK,CAACxG,eAAe,IAC9C,IAAI,CAACG,cAAc,KAAKqG,KAAK,CAACrG,cAAc;IAEhD;EAAC;IAAA;IAAA,OApLD,kBAAgBlC,IAAI,EAAE;MACpB,OAAO4F,MAAM,CAAClB,MAAM,CAAC1E,IAAI,CAACsB,MAAM,EAAEtB,IAAI,CAAC+B,eAAe,EAAE/B,IAAI,CAACkC,cAAc,EAAElC,IAAI,CAAC4G,WAAW,CAAC;IAChG;EAAC;IAAA;IAAA,OAED,gBAActF,MAAM,EAAES,eAAe,EAAEG,cAAc,EAAuB;MAAA,IAArB0E,WAAW,uEAAG,KAAK;MACxE,IAAMd,eAAe,GAAGxE,MAAM,IAAI5B,QAAQ,CAAC8I,aAAa;MACxD;MACA,IAAMC,OAAO,GAAG3C,eAAe,KAAKc,WAAW,GAAG,OAAO,GAAGxF,YAAY,EAAE,CAAC;MAC3E,IAAMsH,gBAAgB,GAAG3G,eAAe,IAAIrC,QAAQ,CAACiJ,sBAAsB;MAC3E,IAAMC,eAAe,GAAG1G,cAAc,IAAIxC,QAAQ,CAACmJ,qBAAqB;MACxE,OAAO,IAAIjD,MAAM,CAAC6C,OAAO,EAAEC,gBAAgB,EAAEE,eAAe,EAAE9C,eAAe,CAAC;IAChF;EAAC;IAAA;IAAA,OAED,sBAAoB;MAClB3E,cAAc,GAAG,IAAI;MACrBZ,WAAW,GAAG,CAAC,CAAC;MAChBG,YAAY,GAAG,CAAC,CAAC;MACjBI,YAAY,GAAG,CAAC,CAAC;IACnB;EAAC;IAAA;IAAA,OAED,sBAAoE;MAAA,+EAAJ,CAAC,CAAC;QAA9CQ,MAAM,QAANA,MAAM;QAAES,eAAe,QAAfA,eAAe;QAAEG,cAAc,QAAdA,cAAc;MACzD,OAAO0D,MAAM,CAAClB,MAAM,CAACpD,MAAM,EAAES,eAAe,EAAEG,cAAc,CAAC;IAC/D;EAAC;EAAA;AAAA;AAAA,SAvBkB0D,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}