{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// import '../Common/Polyfills';\nimport Observable from 'zen-observable-ts';\nimport { Amplify, browserOrNode, ConsoleLogger as Logger, INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER } from '@aws-amplify/core';\nimport { AWSAppSyncRealTimeProvider } from './Providers';\nvar isNode = browserOrNode().isNode;\nvar logger = new Logger('PubSub');\nvar PubSubClass = /** @class */function () {\n  /**\n   * Initialize PubSub with AWS configurations\n   *\n   * @param {PubSubOptions} options - Configuration object for PubSub\n   */\n  function PubSubClass(options) {\n    this._options = options !== null && options !== void 0 ? options : {};\n    logger.debug('PubSub Options', this._options);\n    this._pluggables = [];\n    this.subscribe = this.subscribe.bind(this);\n  }\n  Object.defineProperty(PubSubClass.prototype, \"awsAppSyncRealTimeProvider\", {\n    /**\n     * Lazy instantiate AWSAppSyncRealTimeProvider when it is required by the API category\n     */\n    get: function get() {\n      if (!this._awsAppSyncRealTimeProvider) {\n        this._awsAppSyncRealTimeProvider = new AWSAppSyncRealTimeProvider(this._options);\n      }\n      return this._awsAppSyncRealTimeProvider;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PubSubClass.prototype.getModuleName = function () {\n    return 'PubSub';\n  };\n  /**\n   * Configure PubSub part with configurations\n   *\n   * @param {PubSubOptions} config - Configuration for PubSub\n   * @return {Object} - The current configuration\n   */\n  PubSubClass.prototype.configure = function (options) {\n    var _this = this;\n    var opt = options ? options.PubSub || options : {};\n    logger.debug('configure PubSub', {\n      opt: opt\n    });\n    this._options = Object.assign({}, this._options, opt);\n    this._pluggables.map(function (pluggable) {\n      return pluggable.configure(_this._options);\n    });\n    return this._options;\n  };\n  /**\n   * add plugin into Analytics category\n   * @param {Object} pluggable - an instance of the plugin\n   */\n  PubSubClass.prototype.addPluggable = function (pluggable) {\n    return __awaiter(this, void 0, void 0, function () {\n      var config;\n      return __generator(this, function (_a) {\n        if (pluggable && pluggable.getCategory() === 'PubSub') {\n          this._pluggables.push(pluggable);\n          config = pluggable.configure(this._options);\n          return [2 /*return*/, config];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n  /**\n   * remove plugin from PubSub category\n   * @param providerName - the name of the plugin\n   */\n  PubSubClass.prototype.removePluggable = function (providerName) {\n    this._pluggables = this._pluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n  };\n  PubSubClass.prototype.getProviderByName = function (providerName) {\n    if (providerName === INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER) {\n      return this.awsAppSyncRealTimeProvider;\n    }\n    return this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === providerName;\n    });\n  };\n  PubSubClass.prototype.getProviders = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var providerName = options.provider;\n    if (!providerName) {\n      return this._pluggables;\n    }\n    var provider = this.getProviderByName(providerName);\n    if (!provider) {\n      throw new Error(\"Could not find provider named \" + providerName);\n    }\n    return [provider];\n  };\n  PubSubClass.prototype.publish = function (topics, msg, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, Promise.all(this.getProviders(options).map(function (provider) {\n          return provider.publish(topics, msg, options);\n        }))];\n      });\n    });\n  };\n  PubSubClass.prototype.subscribe = function (topics, options) {\n    if (isNode && this._options && this._options.ssr) {\n      throw new Error('Subscriptions are not supported for Server-Side Rendering (SSR)');\n    }\n    logger.debug('subscribe options', options);\n    var providers = this.getProviders(options);\n    return new Observable(function (observer) {\n      var observables = providers.map(function (provider) {\n        return {\n          provider: provider,\n          observable: provider.subscribe(topics, options)\n        };\n      });\n      var subscriptions = observables.map(function (_a) {\n        var provider = _a.provider,\n          observable = _a.observable;\n        return observable.subscribe({\n          start: console.error,\n          next: function next(value) {\n            return observer.next({\n              provider: provider,\n              value: value\n            });\n          },\n          error: function error(_error) {\n            return observer.error({\n              provider: provider,\n              error: _error\n            });\n          }\n        });\n      });\n      return function () {\n        return subscriptions.forEach(function (subscription) {\n          return subscription.unsubscribe();\n        });\n      };\n    });\n  };\n  return PubSubClass;\n}();\nexport { PubSubClass };\nexport var PubSub = new PubSubClass();\nAmplify.register(PubSub);","map":{"version":3,"mappings":"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","names":["Observable","Amplify","browserOrNode","ConsoleLogger","Logger","INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER","AWSAppSyncRealTimeProvider","logger","options","_options","debug","_pluggables","subscribe","bind","Object","PubSubClass","_awsAppSyncRealTimeProvider","opt","PubSub","assign","map","configure","_this","pluggable","getCategory","push","config","providerName","filter","getProviderName","awsAppSyncRealTimeProvider","find","provider","getProviderByName","Error","topics","msg","Promise","all","getProviders","publish","isNode","ssr","providers","observables","observable","subscriptions","_a","start","console","error","next","value","forEach","unsubscribe","register"],"sources":["/workspace/aws-bootcamp-cruddur-2023/frontend-react-js/node_modules/@aws-amplify/pubsub/src/PubSub.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// import '../Common/Polyfills';\nimport Observable from 'zen-observable-ts';\n\nimport {\n\tAmplify,\n\tbrowserOrNode,\n\tConsoleLogger as Logger,\n\tINTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER,\n} from '@aws-amplify/core';\nimport { PubSubProvider, PubSubOptions, ProviderOptions } from './types';\nimport { AWSAppSyncRealTimeProvider } from './Providers';\n\nconst { isNode } = browserOrNode();\nconst logger = new Logger('PubSub');\n\nexport class PubSubClass {\n\tprivate _options: PubSubOptions;\n\n\tprivate _pluggables: PubSubProvider[];\n\n\t/**\n\t * Internal instance of AWSAppSyncRealTimeProvider used by the API category to subscribe to AppSync\n\t */\n\tprivate _awsAppSyncRealTimeProvider?: AWSAppSyncRealTimeProvider;\n\n\t/**\n\t * Lazy instantiate AWSAppSyncRealTimeProvider when it is required by the API category\n\t */\n\tprivate get awsAppSyncRealTimeProvider() {\n\t\tif (!this._awsAppSyncRealTimeProvider) {\n\t\t\tthis._awsAppSyncRealTimeProvider = new AWSAppSyncRealTimeProvider(\n\t\t\t\tthis._options\n\t\t\t);\n\t\t}\n\t\treturn this._awsAppSyncRealTimeProvider;\n\t}\n\n\t/**\n\t * Initialize PubSub with AWS configurations\n\t *\n\t * @param {PubSubOptions} options - Configuration object for PubSub\n\t */\n\tconstructor(options?: PubSubOptions) {\n\t\tthis._options = options ?? {};\n\t\tlogger.debug('PubSub Options', this._options);\n\t\tthis._pluggables = [];\n\t\tthis.subscribe = this.subscribe.bind(this);\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'PubSub';\n\t}\n\n\t/**\n\t * Configure PubSub part with configurations\n\t *\n\t * @param {PubSubOptions} config - Configuration for PubSub\n\t * @return {Object} - The current configuration\n\t */\n\tconfigure(options: PubSubOptions) {\n\t\tconst opt = options ? options.PubSub || options : {};\n\t\tlogger.debug('configure PubSub', { opt });\n\n\t\tthis._options = Object.assign({}, this._options, opt);\n\n\t\tthis._pluggables.map(pluggable => pluggable.configure(this._options));\n\n\t\treturn this._options;\n\t}\n\n\t/**\n\t * add plugin into Analytics category\n\t * @param {Object} pluggable - an instance of the plugin\n\t */\n\tpublic async addPluggable(pluggable: PubSubProvider) {\n\t\tif (pluggable && pluggable.getCategory() === 'PubSub') {\n\t\t\tthis._pluggables.push(pluggable);\n\n\t\t\tconst config = pluggable.configure(this._options);\n\n\t\t\treturn config;\n\t\t}\n\t}\n\n\t/**\n\t * remove plugin from PubSub category\n\t * @param providerName - the name of the plugin\n\t */\n\tremovePluggable(providerName: string): void {\n\t\tthis._pluggables = this._pluggables.filter(\n\t\t\tpluggable => pluggable.getProviderName() !== providerName\n\t\t);\n\t}\n\n\tprivate getProviderByName(providerName: string | symbol) {\n\t\tif (providerName === INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER) {\n\t\t\treturn this.awsAppSyncRealTimeProvider;\n\t\t}\n\n\t\treturn this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === providerName\n\t\t);\n\t}\n\n\tprivate getProviders(options: ProviderOptions = {}) {\n\t\tconst { provider: providerName } = options;\n\t\tif (!providerName) {\n\t\t\treturn this._pluggables;\n\t\t}\n\n\t\tconst provider = this.getProviderByName(providerName);\n\t\tif (!provider) {\n\t\t\tthrow new Error(`Could not find provider named ${providerName}`);\n\t\t}\n\n\t\treturn [provider];\n\t}\n\n\tasync publish(\n\t\ttopics: string[] | string,\n\t\tmsg: any,\n\t\toptions?: ProviderOptions\n\t) {\n\t\treturn Promise.all(\n\t\t\tthis.getProviders(options).map(provider =>\n\t\t\t\tprovider.publish(topics, msg, options)\n\t\t\t)\n\t\t);\n\t}\n\n\tsubscribe(\n\t\ttopics: string[] | string,\n\t\toptions?: ProviderOptions\n\t): Observable<any> {\n\t\tif (isNode && this._options && this._options.ssr) {\n\t\t\tthrow new Error(\n\t\t\t\t'Subscriptions are not supported for Server-Side Rendering (SSR)'\n\t\t\t);\n\t\t}\n\n\t\tlogger.debug('subscribe options', options);\n\n\t\tconst providers = this.getProviders(options);\n\n\t\treturn new Observable(observer => {\n\t\t\tconst observables = providers.map(provider => ({\n\t\t\t\tprovider,\n\t\t\t\tobservable: provider.subscribe(topics, options),\n\t\t\t}));\n\n\t\t\tconst subscriptions = observables.map(({ provider, observable }) =>\n\t\t\t\tobservable.subscribe({\n\t\t\t\t\tstart: console.error,\n\t\t\t\t\tnext: value => observer.next({ provider, value }),\n\t\t\t\t\terror: error => observer.error({ provider, error }),\n\t\t\t\t\t// complete: observer.complete, // TODO: when all completed, complete the outer one\n\t\t\t\t})\n\t\t\t);\n\n\t\t\treturn () =>\n\t\t\t\tsubscriptions.forEach(subscription => subscription.unsubscribe());\n\t\t});\n\t}\n}\n\nexport const PubSub = new PubSubClass();\nAmplify.register(PubSub);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}